<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Next主题自带部分标签使用教程]]></title>
    <url>%2Fnext-syntax.html</url>
    <content type="text"><![CDATA[本文最后更新于2019年01月22日20:50可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 本文内容全部来自Next主题官方博客。 前段时间在修改主题的时候发现的这个博客，发现了很多Next主题中带的一些标签的用法。如下： 居中标签 原始内容标签 Note标签 居中标签使用{% centerquote %}或者{% cq %}标签包裹内容，实现内容居中的效果。注意内容后要用{% endcenterquote %}或{% endcq %}结尾。 例如： centerquote样例cq样例代码： 1&#123;% centerquote %&#125;被包裹的内容&#123;% endcenterquote %&#125; 效果： 被包裹的内容代码： 1&#123;% cq %&#125;Something&#123;% endcq %&#125; 效果： Something 原始内容标签使用{% include_raw '路径' %}标签引入html文件中的内容。 例子： 新建1.html文件在根目录/source/_data/，没有_data文件夹的话新建一个。1.html内写入如下内容： 1&lt;strong&gt;include_raw&lt;/strong&gt;标签使用样例，来自&lt;a href = &quot;https://www.lixint.me&quot;&gt;LixT&apos;s Blog&lt;/a&gt;。 文章中需要的位置写入如下内容： 1&#123;% include_raw &apos;_data/1.html&apos; %&#125; 效果： include_raw标签使用样例，来自LixT's Blog。 Note标签基本配置 可以在主题配置文件找到如下配置 123456789101112note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: simple icons: false border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 使用方法 12345678#语法&#123;% note class icon %&#125;Any content (support inline tags too.io).&#123;% endnote %&#125;#参数解释class可选项 : default | primary | success | info | warning | danger.icon可选项 : on-icon | 不填 icon项注意默认是不显示图标的，需要显示图标的话需要在主题配置文件中修改note下的icon项为true。此时全局默认为显示图标，如果此时需要单个标签不显示图标，则可在在标签后添加参数no-icon，具体看下面的例子 代码块注意如果需要在标签内使用代码块的话，需要使用{% codeblock %}代码{% endcodeblock %}，代码块标签用法参考代码块标签用法例如：12345&#123;% codeblock %&#125;import requestss = requests.session()r = s.get(&quot;https://www.lixint.me&quot;)&#123;% endcodeblock %&#125; 使用样例： 不定义样式defaultprimaryinfosuccesswarningdanger代码： 12345&#123;% note %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观只用note则不定义样式&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观只用note则不定义样式代码： 12345678&#123;% note default %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到[LixT&apos;s Blog](https://www.lixint.me)&#123;% endnote %&#125;&#123;% note default no-icon %&#125;不显示图标效果&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到LixT’s Blog 不显示图标效果代码： 12345678&#123;% note primary %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到[LixT&apos;s Blog](https://www.lixint.me)&#123;% endnote %&#125;&#123;% note primary no-icon %&#125;不显示图标效果&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到LixT’s Blog 不显示图标效果代码： 12345678&#123;% note info %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到[LixT&apos;s Blog](https://www.lixint.me)&#123;% endnote %&#125;&#123;% note info no-icon %&#125;不显示图标效果&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到LixT’s Blog 不显示图标效果代码： 12345678&#123;% note success %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到[LixT&apos;s Blog](https://www.lixint.me)&#123;% endnote %&#125;&#123;% note success no-icon %&#125;不显示图标效果&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到LixT’s Blog 不显示图标效果代码： 12345678&#123;% note warning %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到[LixT&apos;s Blog](https://www.lixint.me)&#123;% endnote %&#125;&#123;% note warning no-icon %&#125;不显示图标效果&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到LixT’s Blog 不显示图标效果代码： 12345678&#123;% note danger %&#125;#### 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到[LixT&apos;s Blog](https://www.lixint.me)&#123;% endnote %&#125;&#123;% note danger no-icon %&#125;不显示图标效果&#123;% endnote %&#125; 效果： 标题可以用基本的Markdown语法，我的标题样式修改过，所以在note标签内显示不太美观欢迎来到LixT’s Blog 不显示图标效果 按钮语法 1234567891011&#123;% button url, text, icon [class], [title] %&#125;&lt;!-- Tag Alias --&gt;&#123;% btn url, text, icon [class], [title] %&#125;url : 链接或相对路径text : 按钮显示文本，如果没设置图标，必须要设置文本icon : FontAwesome图标，不需要加前面的fa-,如果没设置文本，必须要设置图标[class] : FontAwesome class(es)，可选项： fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x 可选参数[title] : 鼠标悬停时显示的文本 可选参数 例子 我的博客改过按钮样式，所以效果出来不好看，请自行尝试。 基础用法文本&amp;标题按钮图标文本&amp;图标文中引用按钮边距代码 1&#123;% button https://lixint.me, LixT&apos;s_Blog %&#125; 效果 LixT’s_Blog代码 1&#123;% btn #, Text %&#125;&#123;% btn #, Text &amp; Title,, Title %&#125; 效果 TextText &amp; Title 代码 1&#123;% btn #, Text %&#125; &#123;% btn #, Text &amp; Title,, Title %&#125; 效果 TextText &amp; Title 代码 12&#123;% btn #, Text %&#125;&#123;% btn #, Text &amp; Title,, Title %&#125; 效果 TextText &amp; Title代码 123`&lt;div&gt;&#123;% btn #,, home fa-5x %&#125;&#123;% btn #,, home fa-5x %&#125;&#123;% btn #,, home fa-5x %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, home fa-4x %&#125;&#123;% btn #,, home fa-4x %&#125;&#123;% btn #,, home fa-4x %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-3x %&#125;&#123;% btn #,, home fa-3x %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-2x %&#125;&#123;% btn #,, home fa-2x %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home fa-lg %&#125;&#123;% btn #,, home fa-lg %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;&lt;/div&gt;`#不加div标签效果&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125;&#123;% btn #,, home %&#125; 效果 #不加div标签效果 代码 12&lt;p&gt;&#123;% btn #, Text &amp; Icon (buggy), home %&#125;&#123;% btn #, Text &amp; Icon (fixed width), home fa-fw %&#125;&lt;/p&gt; 效果 Text &amp; Icon (buggy)Text &amp; Icon (fixed width) 代码 12&lt;p&gt;&#123;% btn #, Text &amp; Large Icon, home fa-fw fa-lg %&#125;&#123;% btn #, Text &amp; Large Icon &amp; Title, home fa-fw fa-lg, Title %&#125;&lt;/p&gt; 效果 Text &amp; Large IconText &amp; Large Icon &amp; Title代码 1文章中引用&#123;% btn #, 按钮, home fa-fw fa-lg %&#125;，直接在文中插入代码即可 效果 文章中引用按钮，直接在文中插入代码即可代码 123&lt;div class=&quot;text-center&quot;&gt;&lt;div&gt;&#123;% btn #,, header %&#125;&#123;% btn #,, edge %&#125;&#123;% btn #,, times %&#125;&#123;% btn #,, circle-o %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, italic %&#125;&#123;% btn #,, scribd %&#125;&lt;/div&gt;&lt;div&gt;&#123;% btn #,, google %&#125;&#123;% btn #,, chrome %&#125;&#123;% btn #,, opera %&#125;&#123;% btn #,, diamond fa-rotate-270 %&#125;&lt;/div&gt;&lt;/div&gt; 效果 行内标签语法 12345&#123;% label [class]@Text %&#125;[class] : 可选项default | primary | success | info | warning | danger. &apos;@Text&apos; @后添加文本 如果没设置class的话，默认以default用法 代码 1&#123;% label @行内标签 %&#125;其实就是用各种&#123;% label primary@不同的颜色 %&#125;来标记文本，例如这是&#123;% label primary@primary标签 %&#125;，这是&#123;% label default@default标签 %&#125;，这是&#123;% label success@success标签 %&#125;，这是&#123;% label info@info标签 %&#125;，这是&#123;% label warning@warning标签 %&#125;,这是&#123;% label danger@danger标签 %&#125;,文本上可以加空格。这是&#123;% label success@不加空格的 %&#125;，这是&#123;% label success@加了 空格的 %&#125; 行内标签其实就是用各种不同的颜色来标记文本，例如这是primary标签，这是default标签，这是success标签，这是info标签，这是warning标签,这是danger标签,文本上可以加空格。这是不加空格的，这是加了 空格的 ## 未完待续。。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用OneDrive搭建私人网盘并使用Aria2实现下载后自动上传]]></title>
    <url>%2Fonedrive.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月11日21:27可能会因为没有更新而失效，如已失效或需要修正，请留言！ 准备工作： 1.vps，需要绑定域名的话，可以用DigitalOcean最低价格在5刀每月，支持支付宝，本文中用的就是这个。或者可以用Vultr最低在2.5刀每月，以及阿里云香港 txamd.html 阿里云香港 24块钱一个月，跟前两个差不多。胜在速度快，购买节目跟控制台都是中文。不需要绑定域名的话，可以看看能不能购买阿里云学生机 txamd.html 阿里云学生机，10块钱一个月也挺实惠。没法买的话建议还是买Vultr或者DigitalOcean，即能绑定域名，又可以作他用。2.OneDrive，个人版，教育版，企业版都可以。最近正好有活动可以免费撸一个5T的OneDrive，教程看免费获得5T OneDrive空间 安装宝塔面板Centos安装脚本Ubuntu/Deepin安装脚本Debian安装脚本Fedora安装脚本1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; bash install.sh1wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh 中间有需要输入Y的地方输入Y进行安装，等待安装完成， 安装完成后会显示面板管理页和账号密码 根据现实的信息进行访问 进入后系统自动提示安装环境，注意这里的PHP版本需要在5.5以上，Nginx跟PHP是必须安装的，其他可以根据需求进行安装。 选择好需要安装的环境，点击一键安装。关闭跳出来的消息盒子让他后台自己安装就行了。 默认的用户名跟密码不好记。我们来重置一下面板的用户名跟密码，选择面板设置 修改下方的用户名跟密码即可，修改完成后记得保存。 啊，需要等安装任务完成后才能修改，那我们等待安装完成吧。。 安装完成，设置好账户密码，进入面板首页 点击添加网站 如果有域名的话填写域名，没有的话就直接添加IP地址 点击提交后点击添加旁的管理按钮，找到之前添加的站点，点击网站目录 下载OneIndex源码安装授权然后我们来安装oneindex，首先到OneIndex项目页面下载程序源码。 下载zip文件到本地即可。 网站目录中点击上传，把刚才下载的zip源码包上传到网站目录 右键单击，解压 解压完成后多了一个文件夹，进到文件夹中把里面所有文件都剪切到网站根目录。 此时打开站点绑定的域名或者ip地址进到OneIndex配置页面，点击下一步。 点击获取应用ID和机密，跳转到Microsoft的登录页。 登录之前申请好的OneDrive的账户 登录后显示应用机密，复制填入OneIndex配置页，然后点击下面的知道了，返回到快速启动 复制新页面中的APPid 填写完毕，进行下一步。 点击绑定账号，绑定你之前的账号即可。 绑定完成，安装成功 修改密码与去掉/?/先进入管理后台进行设置。 设置去掉/?/，点击保存，进到宝塔面板站点设置。 设置好保存，回到OneIndex进行其他设置。 12345678910111213141516171819202122232425#不建议创建和以下同名的文件夹和文件，否则会导致文件无法查看下载README.md、HEAD.md 、.password 、.deny特殊文件使用#在文件夹底部添加说明在onedrive的文件夹中添加README.md文件，使用markdown语法。#在文件夹头部添加说明在onedrive的文件夹中添加HEAD.md 文件，使用markdown语法。#加密文件夹在onedrive的文件夹中添加.password文件，填入密码，密码不能为空。#禁止访问文件夹在onedrive的文件夹中添加.deny文件，该文件夹被禁止访问。#重置全部数据，删除数据库数据php artisan od:reset#重置OneDrive登陆账号php artisan od:logout #升级程序git pullcomposer install -vvvphp artisan od:update Aria2安装这里使用逗逼根据地的脚本 123wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh#备用地址wget -N --no-check-certificate https://www.moerats.com/usr/shell/Aria2/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh 这个脚本使用很简单，安装提示的步骤操作即可。安装后记下中间设置的下载路径、端口及密码,也可以根据需要输入命令bash aria2.sh修改配置。 安装AriaNg这一步在宝塔面板中也很简单，跟OneIndex操作一样 到下载Zip压缩包。 先添加网站，有域名的话绑定一个域名，如果没有域名的话，端口要跟OneIndex的不同。将压缩包上传至站点目录，解压至站点目录即可，跟OneIndex的操作是相同的。不作赘述。 配置AriaNg 打开之前设置的的AriaNg域名，点击AriaNG设置 例如我安装Aria2的云服务器IP是123.123.123.123，设置的端口是6800，第一行别名随意填 第二行地址也填上IP地址，端口也改成安装时设置的端口，填写好密钥，其他不用动。 填写完成后自动保存。 如果设置正确的话，下方的Aria2状态就会变成已连接 到这里，AriaNg的设置就完成了。 配置Aria2下载后自动上传至OneIndex 此处的方法与脚本都来自于 设置Aria2自动上传安装脚本Ubuntu和Debian系统Centos系统1apt-get install -y curl1yum install curl -y 运行命令安装脚本： 1wget --no-check-certificate -qO- "https://raw.githubusercontent.com/0oVicero0/OneDrive/master/OneDrive.sh" |bash 本脚本需要三个参数Client ID、Secret、Reply URL，均需要在/usr/local/etc/OneDrive/onedrive.cfg文件里修改，参数获取看下面，当然你也可以不用管，跳过参数获取部分进行下一步====&gt;运行账号认证程序 获取参数先访问Microsoft Azure Management Portal，然后点击左侧菜单栏中的Azure Active Directorg，选择应用注册，再点击页面上方的新应用程序注册。 输入名称如：OneDrive for Linux，应用程序类型选择Web应用/API，填入登陆URL：https://login.microsoftonline.com/，再点击创建。 然后点击刚刚创建的应用程序，复制应用程序ID，即脚本需要的Client ID参数，再点击左上角的设置。 然后进行如下修改： 1234#点击右边的回复URL，将其修改为：https://onedrive.live.com/about/business/，即脚本所需要的Reply URL参数。#点击所需权限，点击Windows Azure Active Directory确认是否已选中Sign in and user profile，如果没有则选中并点击完成。#点击上方的添加，点击选择API，选中Office 365 SharePoint Online，并点击选择。在选择权限中选中Read user files 和Read and write user files，并点击选择。点击完成按钮，并关掉此小窗口。#点击密钥，填入密钥描述，如：OneDrive，选择年限1年，点击保存，再复制密匙，即脚本所需要的Secret参数。 不过这里说下密匙(Secret参数)填写的一个坑，由唯一度博主填平。就是当我们获取到带+号的密匙时候，我们需要使用编码符号，把+改成％2B，然后再填入脚本里，不然最后会出现Something went wrong, here is the API response的错误，导致验证失败。 运行账号认证程序运行命令onedrive -a，将返回的网址复制到浏览器打开，再登陆你的OneDrive for Business账号，登陆成功后复制地址栏中的地址(复制包括localhost的所有链接地址)，粘贴到SSH客户端里，敲回车键即可。 如果返回以下字段：It seems like we have a refresh token, so we are ready to go，那就恭喜你，设置成功! 1提示：如果你遇到bash: onedrive: command not found错误，则需要找到/usr/local/etc/OneDrive文件夹，修改onedrive和onedrive-d脚本，在第二行都加上export PATH=/usr/local/bin:$PATH代码，再保存就行了。 使用使用命令命令示范12345678910111213141516171819202122232425onedrive --help #####################################################################Usage: onedrive [OPTIONS] file1 [file2...] onedrive-d folder Options: -d, --debug Enable debug mode -a, --authorize Run authorization process -f, --folder Upload files into this remote folder -c, --creat Creat remote folder." Directory names are separated with a slash, e.g. rootFolder/subFolder Do NOT use a trailing slash! -h, --help Show this help -r, --rename Rename the files during upload For each file you specify you MUST also specify the remote filename as the subsequent parameter Be especially careful with globbing! -s, --silent Silent mode for use in crontab scripts. Return only exit code. -ls,--list Show the itmes in this directory. -l, --link Show the file share link. #####################################################################如果我们要上传/root文件夹里面的moerats.txt，使用命令： 123456#此命令默认上传到OneDrive根目录onedrive '/root/moerats.txt'#如果上传到指定文件夹，就需要加-f参数onedrive -f RATS '/root/moerats.txt' #上传到OneDrive根目录的RATS文件夹onedrive -f RATS/RATS '/root/moerats.txt' #上传到OneDrive根目录RATS文件夹里的RATS文件夹 如果我们要将/root文件夹及里面的文件夹和文件一起上传，使用命令： 123456#此命令默认上传到OneDrive根目录onedrive-d '/root'#如果上传到指定文件夹，就需要加-f参数onedrive-d -f RATS '/root' #上传到OneDrive根目录的RATS文件夹onedrive-d -f RATS/RATS '/root' #上传到OneDrive根目录RATS文件夹里的RATS文件夹 如果我们想直接查看OneDrive网盘目录的文件，使用命令： 1234#此命令只查看根目录文件onedrive -l#如果我们要查看根目录root文件夹里的文件onedrive -l /root Aria2自动上传使用宝塔面板或者SSH，进入/root/.aria2文件夹，新建文件upload.sh 编辑文件写入如下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/bin/bashGID="$1";FileNum="$2";File="$3";MaxSize="15728640"RemoteDIR="Download"; #上传到Onedrive的路径，默认为根目录，如果要上传到指定目录，方法看文章最后面。LocalDIR="/root/Download/"; #Aria2下载目录，记得最后面加上/if [[ -z $(echo "$FileNum" |grep -o '[0-9]*' |head -n1) ]]; then FileNum='0'; fiif [[ "$FileNum" -le '0' ]]; then exit 0; fiif [[ "$#" != '3' ]]; then exit 0; fifunction LoadFile()&#123; IFS_BAK=$IFS IFS=$'\n' if [[ ! -d "$LocalDIR" ]]; then return; fi if [[ -e "$File" ]]; then if [[ $(dirname "$File") == $(readlink -f $LocalDIR) ]]; then ONEDRIVE="onedrive"; else ONEDRIVE="onedrive-d"; fi FileLoad="$&#123;File/#$LocalDIR&#125;" while true do if [[ "$FileLoad" == '/' ]]; then return; fi echo "$FileLoad" |grep -q '/'; if [[ "$?" == "0" ]]; then FileLoad=$(dirname "$FileLoad"); else break; fi; done; if [[ "$FileLoad" == "$LocalDIR" ]]; then return; fi if [[ -n "$RemoteDIR" ]]; then Option=" -f $RemoteDIR"; else Option=""; fi EXEC="$(command -v $ONEDRIVE)"; if [[ -z "$EXEC" ]]; then return; fi cd "$LocalDIR"; if [[ -e "$FileLoad" ]]; then ItemSize=$(du -s "$FileLoad" |cut -f1 |grep -o '[0-9]*' |head -n1) if [[ -z "$ItemSize" ]]; then return; fi if [[ "$ItemSize" -ge "$MaxSize" ]]; then echo -ne "\033[33m$File \033[0mtoo large to spik.\n"; return; fi eval "$&#123;EXEC&#125;$&#123;Option&#125;" \'"$&#123;FileLoad&#125;"\'; if [[ $? == '0' ]]; then rm -rf "$FileLoad"; fi fi fi IFS=$IFS_BAK&#125;LoadFile; 修改顶部两项配置，RemoteDIR是OneDrive中的文件夹名，填写&quot;&quot;则为上传至根目录。 LocalDIR为Aria2下载的文件夹，之前安装时设置过。 12#上传到Onedrive里的RATS目录，参数改为：RemoteDIR=&quot;RATS&quot;; #上传到Onedrive里的RATS目录里的RATS目录，参数改为：RemoteDIR=&quot;RATS/RATS&quot;; 如果你觉得上传速度较慢，可以编辑/usr/local/etc/OneDrive/onedrive.cfg，修改threads线程数，默认2。 chmod +x upload.sh修改权限，然后再到Aria2配置文件aria.conf中加上一行on-download-complete=/root/.aria2/upload.sh即可，后面为脚本的路径。最后重启Aria2生效。 至此，我们的设置就全部完成了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>OneDrive</tag>
        <tag>OneIndex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu部分折腾记录]]></title>
    <url>%2Fubuntu.html</url>
    <content type="text"><![CDATA[本文最后更新于2019年01月05日18:57可能会因为没有更新而失效，如已失效或需要修正，请留言！ 安装中文输入法首先卸载电脑中存在的ibus输入法，这个时候在系统中还可以看到ibus的设置和输入法，不过没有关系，如果介意的话可以重启电脑即可消除。 1sudo apt remove &apos;ibus*&apos; 安装 fcitx 输入法配置框架 1sudo apt install fcitx-bin fcitx-table 然后打开设置中心， 选中 “区域和语言” &gt; 管理已安装的语言（会提示是否安装ibus的输入法，这里选择“稍后提醒”） &gt; 键盘输入法系统中选择 “fcitx” &gt; 应用到整个系统. 这个时候重启电脑之后就可以再右上角看到 fcitx 的设置图标； 然后开始安装搜狗输入法，进入 地址：https://pinyin.sogou.com/linux/， 下载对应系统配置的输入法， 双击安装即可安装搜狗输入法； 如果需要安装谷歌拼音，则执行命令： 1sudo apt install fcitx-googlepinyin 右键点击图标，选择 “配置当前输入法” ， 如果这是提示未安装图形配置界面，则需要执行命令： 1sudo apt install &apos;fcitx-config-gtk&apos; 将自带的两个拼音输入法清除，选中我们安装的搜狗输入法， 第一项是“键盘xx”, 第二项是”搜狗输入法“，之后通过shift便可以在中英文间切换啦。 安装Anaconda3下载Anaconda 官网下载 清华大学开源镜像站 官网下载后文件名是Anaconda3-2018.12-Linux-x86_64.sh 安装 Anaconda在存放 Anaconda安装包的文件夹下右键打开命令行，运行.sh文件 1bash Anaconda3-2018.12-Linux-x86_64.sh 进入注册信息页面，一直回车，输入yes； 进入安装过程。 安装完成后，收到加入环境变量的提示信息，输入yes 安装完成 提示信息“Do you wish to proceed with the installation of Microsoft VSCode? [yes|no]”，输入no； 输入命令source ~/.bashrc使之前的环境变量配置生效。 输入conda list看一下是否有效。 如果之前提示加入环境变量那里没有按yes，可以输入以下命令手动加入环境变量 12echo &apos;export PATH=&quot;~/anaconda3/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrcsource ~/.bashrc 卸载1`rm ``-``rf ~``/``anaconda3` sudo: pip：找不到命令编辑文件 /etc/sudoers，将Defaults env_reset ,改为 Defaults !env_reset 123sudo vi /etc/sudoersDefaults !env_reset 编辑文件~/.bashrc 1sudo vi ~/.bashrc 在最后一行添加alias sudo=&#39;sudo env PATH=$PATH&#39; 按esc输入:wq! 添加完之后，再source一下source ~/.bashrc 参考： Anaconda主要参考于：Ubuntu18.04 安装 Anaconda3 输入法安装主要参考于：Ubuntu 18.04 LTS 安装 搜狗输入法，谷歌拼音]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动硬盘安装Ubuntu18.10折腾笔记]]></title>
    <url>%2Fhd-ubuntu.html</url>
    <content type="text"><![CDATA[本文最后更新于2019年01月02日17:20可能会因为没有更新而失效，如已失效或需要修正，请留言！ 写在前面在往移动硬盘装之前，网上查了N多教程，的确是绕过了几个坑。莫名其妙就装好了，至今也是一头雾水 中间涉及到引导的设置什么的，也没怎么搞懂。 目前比较常见的坑： 安装完成后不插移动硬盘无法启动原来的系统。 安装完成后的通过USB启动无法进入ubuntu 移动硬盘插到别的电脑上无法使用。 安装步骤安装步骤主要参考的把Ubuntu16.04装进移动硬盘的惨痛实战 准备工作 Ubuntu镜像，这个可以到清华大学开源镜像软件站去下载，下载速度很快。 启动盘制作软件：Universal-USB-Installer 磁盘管理软件：DiskGenius 引导程序：GRUB4DOS 硬件准备： 移动硬盘（或10G以上U盘） U盘（作安装启动盘和LiveCD） 制作启动盘这个比较容易，把镜像下载好后，打开软件。按步骤选择镜像。 图片来自把Ubuntu16.04装进移动硬盘的惨痛实战 安装ubuntu U盘启动盘制作好后，插着U盘重启，Boot设置USB启动。等待加载出菜单后选择第一项Try ubuntu without installing 等待进入系统后，双击打开桌面上的install Ubuntu进入安装程序。 由于中间没有截图。以文字描述。并不复杂 首先是选择语言，菜单拉倒最后，选择中文。后面就都变成中文了。一步步操作即可。 我这次安装的是Ubuntu18，中间可以选择最小安装，下载安装更新以节约安装后的时间这两项 再后面有个安装类型。选择最下面的其他，进到盘符选择页面 这个时候要保证移动硬盘也是连接的，如果选择盘符页面没有加载出移动硬盘来，可以点击后退再重新进到页面。 在随后的这个界面中，假设/dev/sda是你的移动硬盘，选中其下的所有盘符，点击下面的“－”删去（相当于格式化），然后点击free space，点击下面的“＋”，按下图挂载三个partition： 根目录（建议50GB以内） 交换空间（建议与内存大小相同） home（用户文件等均在此part下，建议分配较多的空间） 我的操作界面是中文的，但跟这个操作步骤是一样的。 无需挂载boot类型的partition 记得在Device for boot loader installation中选择你的移动硬盘，否则开机引导会被grub2无情整合导致不插硬盘启动不了。这个地方我试过两次，一次是选了移动硬盘，一次是选了移动硬盘下挂载/的分区，最后都出了问题，所以没看出区别。 注意：这里设置完成点击安装时可能会有如下提示： “分配到/的分区/dev/sdc1开始于3584字节,使用磁盘的最小对齐,这可能造成非常差的性能…” 出现这个问题的原因不是很明确，我用了网上的方法，重新用DiskGenius对硬盘进行了分区。 新建一个Linux Native格式的分区，作为挂载/的分区 新建一个Linux Swap格式的分区作为交换空间 剩余的格式随意，作为挂载/home的分区 这样在安装时就不需要再建立分区，直接选择相应的分区然后进行挂载就行了。 点击安装之前留意一下移动硬盘的盘符，例如我的电脑是固态+机械双硬盘，插上移动硬盘的话就是三个硬盘，分别就是 固态/dev/sda，电脑的机械硬盘/dev/sdb/，机械硬盘四个分区，就分别是/dev/sdb 1 ~ /dev/sdb 4 ,同理移动硬盘是/dev/sdc 1 开始的。记一下挂载/的盘符号。后面可能会用到。 选择地区的时候，我根据网上的建议选择了台北。实际上台北的速度也不快，可能是跟地理位置有关。重新安装时选择上海，10分钟左右安装完毕，USB3.0的话应该会更快。 以下部分属于我对着教程的个人理解，可能是(八九成)是错的 安装完毕后提示是否重启，不要点击重启，一定先点一下继续，这样移动硬盘会加载回来。然后用ubuntu自带的文件管理器打开移动硬盘安装盘的根目录（”/“挂载盘），用gedit打开”/etc/fstab”，把挂载点为”/“的盘符（如/dev/sdc5）和UUID记下来。 这里不知道是不是我安装的时候有什么问题，打开后没有发现挂载/的盘符。所以后面要用到盘符的时候我填的就是之前安装时记下来的盘符号，可能出问题也是因为这个。 这个UUID的获取，用文件管理器打开移动硬盘挂载/的目录，右键open in Terminal ubuntu/后面的这一串应该就是UUID 然后使用命令cat /proc/version 获取内核版本号（如4.10.0-28），也记录下来。 安装GRUB4DOS引导趁热打铁，下载GRUB4DOS， 解压后有一个menu.lst，将其中的4.10.0-28 全部替换为你的内核版本号，将8578bdcd-8385-4121-80c4-d48cc0b2e282 全部替换为你的UUID，将(hd0,0) 的0全部替换为你的盘符号减1的值（如/dev/sdc5则把(hd0,0)替换为(hd0,4)），保存修改。 在menu.lst文件所在目录下右键open in terminal，使用命令sudo cp menu.lst grldr /media/ubuntu/UUID （将UUID替换为刚记下的UUID）。 关闭计算机，用同样的方法进入boot menu，选择打开WINDOWS。在WINDOWS下使用GRUB4DOS中的grubinst_gui.exe，一定要以右键以管理员身份打开，否则刷新不出磁盘来。在磁盘中选择你的移动硬盘，下面勾选Grub第二版，点击安装。 现在你的移动硬盘已经可以到处使了！想进入ubuntu的时候，在开机的时候进入boot menu切换ubuntu即可。 注意：升级内核后须手动修改menu.lst中的kernel、initrd项，新内核方可生效！ 至此，我的折腾就完毕了。 处理try (hd0,0) ext2问题安装完成后，我的就一直出现这个问题， 解决方案由于目的是使用grub整合windows和ubuntu，于是我使用了有UEFI引导的LiveCD（必须用UEFI进入，如果不支持UEFI，在使用Universal-USB-Installer时选中格式化U盘的选项再装一次，直到支持UEFI）。 使用LiveCD进入try without install的ubuntu系统后，我们选择使用boot-repair来修复引导，它会用grub整合windows和ubuntu，这也是我们想要的（注意，制作移动硬盘ubuntu时，这往往不是我们想要的。但它会在windows盘EFI分区创建好ubuntu的引导，这可以帮助我们在无法使用移动硬盘的机器上手动创建efi引导从而曲线救国）。 如何使用boot-repair修复引导？ Win 10 +Ubuntu 16.04双硬盘双系统，启动报错 Try (hd0,4): EXT2:，亲测成功修复办法 12sudo add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update sudo apt-get install -y boot-repair &amp;&amp; boot-repair 启动Boot Repair： 进行重新安装Grub2引导，内置会自动确定你的/boot分区，/根目录分区：（不确定的可以先选修复，但是修复一般都没用）]]></content>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令--基础篇]]></title>
    <url>%2Flinuxcmd.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月27日19:03可能会因为没有更新而失效，如已失效或需要修正，请留言！ 包管理器apt-get Debian/Ubuntu系统包管理器apt-get 是Debian/Ubuntu系统中 一个用于快速下载/安装的简单命令行管理工具 参数介绍使用示例1234567891011121314151617181920212223# 命令:update - 检索 新的包列表upgrade - 升级 可更新的所有软件包install - 安装 新软件包（pkg是libc6不是libc6.deb）remove - 删除 软件包autoremove - 自动删除 所有未使用的软件包purge - 删除 软件包和配置文件clean - 清除 已下载的归档文件autoclean - 清除 旧的下载的档案文件check - 验证 是否有损坏的依赖download - 下载 二进制包到当前目录# 选项：-q ：不输出任何信息-qq ：除了错误之外，没有输出-d ：仅下载，不要安装或解压缩存档-y ：对所有确定询问都选择 Yes，并且不提示-f ：尝试纠正 被破坏依赖关系的系统-m ：如果存档是可定位的，则尝试继续-u ：显示升级包的列表-b ：在获取源代码包后构建源包# 更多的命令可以用 apt-get --help 查看1234567891011121314151617181920212223242526272829# 检索 新的包列表apt-get update# 升级 可更新的所有软件包（注意这个命令会升级所有的软件包，所以会升级很长时间）apt-get upgrade# 安装 Nginx 软件包apt-get install nginx# 卸载 Nginx 软件包apt-get remove nginx# 卸载 Nginx 软件包 并删除所有相关配置文件apt-get remove --purge nginx# 在安装软件和卸载的时候，为了避免误操作，都会询问是否继续，每次都要输入 y 来确定会很麻烦，可以加上 -y 参数# 安装 Nginx 软件包 并不显示确定提示apt-get install nginx -y# 卸载 Nginx 软件包，删除所有相关配置文件 并不显示提示apt-get remove --purge nginx -y# 清除 旧的/无用 的软件包apt-get clean &amp;&amp; apt-get autoclean# 下载 Nginx 二进制软件包到当前目录，但不解压和安装apt-get download nginx -d# 更多的命令可以用 apt-get --help 查看。 yum CentOS系统包管理器yum 是CentOS系统中 一个用于快速下载/安装的简单命令行管理工具！参数介绍使用示例：123456789101112131415161718192021222324252627282930313233# 命令： update - 检索 新的包列表upgrade - 升级 软件包search - 搜索 软件包install - 安装 软件包list - 列出 软件包或者软件包组info - 显示软件包或者软件包组的详细信息erase - 删除 软件包（这两个命令一样）remove - 删除 软件包（这两个命令一样）groupinfo - 显示 有关包组的详细信息groupinstall - 安装 软件包组（就像一种软件合集）grouplist - 列出 可用的软件包组groupremove - 删除 软件包组check - 检查 软件包check-update - 检查 可更新的软件包clean - 清除 缓存目录内的软件包deplist - 列出 一个包的依赖关系distribution-synchronization - 同步 已安装的软件包到最新的版本downgrad - 降级 一个软件包reinstall - 重新安装 软件包（自动删除重装）repolist - 显示 配置的软件包仓库resolvedep - 确定 软件包需要的依赖关系 # 选项：-t ：容忍错误-C ：完全从系统缓存运行，不要更新缓存-R 分钟 ：最大命令等待时间-q ：安静的操作-y ：对于所有问题回答是--nogpgcheck ：禁用gpg签名检查 # 更多的命令可以用 yum --help 查看。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 检索 新的包列表yum update # 安装 Nginx 软件包yum install nginx # 安装 Development Tools 软件包组（这个软件包组中包含了编译所需的软件）# 注意：当软件包或者软件包组的名字中包含空格的时候，请把 软件包或软件包组 加上双引号！yum groupinstall &quot;Development Tools&quot; # 卸载 Nginx 软件包yum erase nginx / yum remove nginx # 卸载 Development Tools 软件包组yum groupremove &quot;Development Tools&quot; # 升级 所有可更新的软件包yum upgrade # 升级 Nginx 可更新的软件包yum upgrade nginx # 在安装软件和卸载的时候，为了避免误操作，都会询问是否继续，每次都要输入 y 来确定会很麻烦，可以加上 -y 参数# 安装 Nginx 软件包 并不显示确定提示yum install nginx -y # 卸载 Nginx 软件包 并不显示确定提示yum erase nginx -y / yum remove nginx -y # 搜索 Nginx 软件包是否存着yum search nginx # 列出 可用的软件包yum list # 列出 可用的软件包组yum grouplist # 清除 缓存目录中的所有软件包yum clean # 清除 缓存目录中的 Nginx 软件包yum clean nginx # 重装 Nginx 软件包yum reinstall nginx # 更多的命令可以用 yum --help 查看。 文件/文件夹 操作以下除特殊说明，都以当前目录为/root示例。 mkdir 新建 文件夹1234# 在当前文件夹新建一个 bash 文件夹，完整的绝对路径就是 /root/bashmkdir bash # 更多的命令可以用 mkdir --help 查看。 cd 进入 文件夹123456789# 你当前在 /root目录中，使用这个命令会进入 /root/bash目录，这是相对路径cd bash# 如果你不在 /root目录中的话，就不能用上面的相对路径了，就需要绝对路径cd /root/bash—————————————————————————————————————# 假设你当前在 /root/bash目录中，使用相对路径，你可以用这个命令进入上一级 /root目录， .. 代表相对路径 上级目录cd ..# 当然你也可以用绝对路径来进入上一级 /root目录cd /root cp 复制或重命名 文件/文件夹1234567891011121314151617181920212223242526272829303132333435363738394041# 复制当前目录内的 log.txt文件到 /var目录cp log.txt /var/log.txt # 复制当前目录内的 bash文件夹到 /home目录cp -R bash /home/bash—————————————————————————————————————# 复制当前目录内的所有.txt后缀的文件到 /var/log目录cp *.txt /var/log # 复制当前目录内的所有以 example开头的文件到 /var/log目录cp example* /var/log # 复制当前目录内的所有以 example开头 以.txt后缀结尾的文件到 /var/log目录cp example*.txt /var/log—————————————————————————————————————# 假设当前目录是 /root/example/log，要把这个目录中的所有.txt后缀的文件复制到上一级目录 /root/example，那么这样做cp *.txt .. # .. 就是相对路径，代表上一级目录，当然你也可以用绝对路径，这样更不容易出错cp *.txt /root/example—————————————————————————————————————# 重命名当前目录内的 log.txt文件为 log2.txtcp log.txt log2.txt # 复制当前目录内的 log.txt文件到 /var目录并重命名为 log1.txtcp log.txt /var/log1.txt # 复制当前目录内的 bash文件夹到 /home目录并重命名为 bash2cp -R bash /home/bash2—————————————————————————————————————# 复制当前目录内的 log.txt文件到 /var目录，但是 /var 目录中已经存着 log.txt，那么会提示 cp: overwrite `/var/log.txt&apos;? 可以用 -f 强制覆盖cp -f log /var/log.txt # 大家可能会发现，当你使用 cp -f 强制覆盖的时候，依然会询问你是否覆盖，这是因为 CP 为了避免你手误，默认加上了 -i 参数（该参数代表每次覆盖必须询问）。# 所以想要避免 CP 默认的 -i 参数，只需要在 CP 命令前面加上斜杠即可 “/”/cp -f log /var/log.txt # 复制当前目录内的 log.txt log1.txt log2.txt文件和 log233目录到 /home/log目录中cp -R log.txt log1.txt log2.txt log233 /home/log # 更多的命令可以用 cp --help 查看。 mv 移动或重命名 文件/文件夹123456789101112131415161718# 关于 mv 命令，可以参考上面 cp 的使用方法，没什么区别，只是一个是复制，一个是移动，把上面 cp 命令改成 mv 就能套用了。 # 移动当前目录内的 log.txt文件到 /var目录mv log.txt /var/log.txt # 移动当前目录内的 bash文件夹到 /home目录mv bash /home/bash—————————————————————————————————————# 重命名当前目录内的 log.txt文件为 log2.txtmv log.txt log2.txt # 复制当前目录内的 log.txt文件到 /var目录并重命名为 log1.txtmv log.txt /var/log1.txt # 复制当前目录内的 bash文件夹到 /home目录并重命名为 bash2mv bash /home/bash2 # 更多的命令可以用 mv --help 查看。 rm 删除 文件/文件夹123456789101112131415161718192021222324252627282930# 删除当前目录下的 log.txt文件rm log.txt # 删除当前目录下所有.txt后缀的文件rm *.txt # 使用 rm 命令删除时，会提示你是否确定删除，输入 y 即删除，输入 n 则取消# rm: remove regular file `log.txt&apos;? y—————————————————————————————————————# 删除当前目录下所有.txt后缀的文件rm *.txt # 删除当前目录下所有以 example开头的文件rm example* # 删除当前目录下所有以 example开头 以.txt后缀结尾的文件rm example*.txt—————————————————————————————————————# 当你用 rm 删除目录的时候会发现提示这不是一个文件# rm bash# rm: cannot remove `bash&apos;: Is a directory# 可以加上 -r 来归递删除目录及其目录下的内容rm -r bash—————————————————————————————————————# 因为为了避免手误删除错误，所以 rm默认是加上了 -i 的参数，也就是每一次删除文件/目录都会提示，如果觉得烦可以用 -rf 参数rm -rf bash # rm -rf 这个命令请慎重使用，而且千万不要使用 rm -rf / 或者 rm -rf /* 之类的命令(系统自杀)，可能会让你系统爆炸，所以使用请慎重！ # 更多的命令可以用 rm --help 查看。 查看/编辑文件 操作ls 显示目录中文件123456789101112# 显示当前目录下的所有文件ls -a—————————————————————————————————————# 命令后面加上 绝对路径/相对路径 就会显示指定文件夹内的所有文件ls -a bash/log # 相对路径，当前目录是 /root ，欲查看的目录是 /root/bash/logls -a /root/bash/log # 绝对路径， 当前目录是 /root ，欲查看的目录是 /root/bash/log # 更多的命令可以用 ls --help 来查看。 du 查看 文件/文件夹 占用磁盘空间的大小参数介绍使用示例12345678910-h ：以人类易读的方式显示-a ：显示 目录占用的磁盘空间大小，并显示其下目录和文件占用磁盘空间的大小-s ：显示 目录占用的磁盘空间大小，但不显示其下子目录和文件占用的磁盘空间大小-c ：显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和--apparent-size：显示目录或文件自身的大小-l ：统计硬链接占用磁盘空间的大小-L ：统计符号链接所指向的文件占用的磁盘空间大小# 待写... # 更多的命令可以用 du --help 来查看。12345678910# 假设当前位于 /root 目录下，则显示 /root 文件夹的大小，但不显示其子目录和文件的大小du -sh # 假设当前位于 /root 目录下，则显示 /root 文件夹的大小，并显示其子目录和文件的大小du -ah # 假设当前位于 /root 目录下，则显示 /root 文件夹下的所有文件夹的大小及其总和du -lh --max-depth=1 # 更多的命令可以用 du --help 来查看。 cat 查看文件内容样例文件log.txt查看文件清空文件写入文件1234567example233example example666 example2366example888812345678910111213141516171819202122232425262728293031323334353637383940414243444546# 查看 log.txt文件的所有内容cat log.txt# 输出示例如下example233example example666 example2366example8888 # 查看 log.txt文件的所有内容，并对所有行编号cat -n log.txt# 输出示例如下： 1 example233 2 example 3 4 5 example666 6 7 example2366 8 example8888 # 查看 log.txt文件的所有内容，并对非空行编号cat -b log.txt# 输出示例如下： 1 example233 2 example 3 example666 4 example2366 5 example8888 # 查看 log.txt文件的所有内容，并对非空行编号，且不输出多行空行cat -bs log.txt# 输出示例如下： 1 example233 2 example 3 example666 4 example2366 5 example888812345# 清空当前目录中的 log.txt 文件cat /dev/null &gt; log.txt # 清空 /var目录中的 log.txt 文件cat /dev/null &gt; /var/log.txt123456789101112131415# 写入文本到当前目录中的 log.txt文件中(加入文本到文件内容最后)cat &gt;&gt; log.txt &lt;&lt;-EOFexampleexample233example666EOF # 清空文件并写入文本到 /var目录中的 log.txt文件中(先清空后写入)cat &gt; /var/log.txt &lt;&lt;-EOFexampleexample233example666EOF # 更多的命令可以用 cat --help 来查看。 head 查看文件内容（主要用于正查）参数介绍使用示例12345-c 数字：显示指定文件的前 xx 字节的内容（bytes）-n 数字：显示指定文件的前 xx 行的内容-q ：不显示包含指定文件名的文件头（当使用 head打开多个文件的时候，会去在每个文件输出结果的顶部添加一个包含文件名的文件头用于区分） # 更多的命令可以用 head --help 来查看。假设 log.txt 文件内容为： 12345example1example2example3example4example5 12345678910111213141516171819202122232425262728# 查看 log.txt文件的全部内容head log.txt # 查看 log.txt文件的前 3字节的内容head -c 3 log.txt # 输出示例dou # 查看 log.txt文件的前 2行的内容head -n 2 log.txt # 输出示例example1example2 # 查看 log.txt文件的从倒数第2行到行首的内容head -n -2 log.txt # 输出示例example1example2example3 # 查看 log.txt log1.txt log2.txt文件的前 3行内容head -n 3 log.txt log1.txt log2.txt # 更多的命令可以用 head --help 来查看。 tail 查看文件内容（主要用于倒查）12345-c 数字：如果数字为正数(例如 -c +5)，显示指定文件从行首第 xx 字节到最后的内容；如果数字为负数(例如 -c -5)，显示指定文件从行尾第 xx 字节到最后内容。-n 数字：如果数字为正数(例如 -c +3)，显示指定文件从行首第 xx 行到最后的内容；如果数字为负数(例如 -c -3)，显示指定文件从行尾第 xx 行到最后的内容。-f ：即时输出文件变化后增加的内容，也就是监视一个文件的内容变化（常用于监视日志输出），使用 Ctrl＋C 终止 # 更多的命令可以用 tail --help 来查看。 使用示例： 假设 log.txt 文件内容为： 12345example1example2example3example4example5 123456789101112131415161718192021222324252627282930313233343536373839# 查看 log.txt文件的全部内容tail log.txt # 查看 log.txt文件从行首 第25字节到最后的内容tail -c +25 log.txt # 输出示例bi4example5 # 查看 log.txt文件从行尾 第4字节到最前面的内容tail -c -4 log.txt # 输出示例bi5 # 查看 log.txt文件的从第2行到最后一行的内容tail -n +2 log.txt # 输出示例example2example3example4example5 # 查看 log.txt文件的后 2行的内容tail -n -2 log.txt # 输出示例example4example5 # 持续查看（监视） log.txt文件的变化内容（新增加的内容），使用 Ctrl＋C 终止tail -f log.txt # 查看 log.txt log1.txt log2.txt文件的前 3行内容tail -n 3 log.txt log1.txt log2.txt # 更多的命令可以用 tail --help 来查看。 sed 查看/编辑文件内容参数介绍： 12345-i ：操作后应用保存到原文件（如果不加这个参数，那么任何修改都不会影响原文件里的内容，只会把结果输出）-e ：仅显示处理后的结果# 待写... # 更多的命令可以用 sed --help 来查看。 使用示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 查看 log.txt 第3行的内容sed -n &apos;3p&apos; log.txt # 查看 log.txt 第2-8行的内容sed -n &apos;2,8p&apos; log.txt # 删除 log.txt 第1行（首行）sed -i &apos;1d&apos; log.txt # 删除 log.txt 第3-7行sed -i &apos;3,7d&apos; log.txt # 删除 log.txt 最后1行（尾行）sed -i &apos;$d&apos; log.txt # 删除 log.txt 中所有空白行sed -i &apos;/^$/d&apos; log.txt # 删除 log.txt 开头是 example 的行sed -i &apos;/^example/&apos;d log.txt # 删除 log.txt 结尾是 example 的行sed -i &apos;/example$/&apos;d log.txt # 删除 log.txt 文件中所有包含 233内容的行sed -i &apos;/233/d&apos; log.txt # 删除 log.txt 文件中第一个 233文本sed -i &apos;s/233//&apos; log.txt # 删除 log.txt 文件中所有 233文本(g 代表操作所有匹配规则的文本)sed -i &apos;s/233//g&apos; log.txt # 删除 log.txt 文件中所有 第5个233文本(5g 代表第五个匹配规则的文本)sed -i &apos;s/233//5g&apos; log.txt # 替换 log.txt 文件中第一个 233为666sed -i &apos;s/233/666/&apos; log.txt # 替换 log.txt 文件中所有 233为666(g 代表操作所有匹配规则的文本)sed -i &apos;s/233/666/g&apos; log.txt # 替换 log.txt 文件中所有 /ver 为 example/，因为有斜杠，所以需要使用 \ 转义，但是单引号会导致无法转义，所以要改成双引号。sed -i &quot;s/\/ver/example\//&quot; log.txt # 显示 log.txt 文件中的奇数行或偶数行sed -n &apos;p;n&apos; log.txt #奇数行sed -n &apos;n;p&apos; log.txt #偶数行 # 更多的命令可以用 sed --help 来查看。 VI、VIM、Nano 编辑文件内容vim 1234567891011121314151617181920212223242526272829# 打开当前目录下的 log.txt文件，如果没有那么会新建 log.txt文件（安装vim后，使用 vi和 vim打开文件没区别）vi log.txtvim log.txt # 在命令行模式下，直接输入以下 符号和字母(区分大小写)## 进入编辑模式（插入模式，按 Esc键 即可返回命令行模式）i## 删除光标当前所在的一行dd## 删除文件内所有内容dddG## 复制光标当前所在的一行yy## 粘贴刚才复制的一行内容p## 撤销上个操作（误操作可以用这个恢复）u## 保存当前文件（ : 是英文的冒号）:w## 另存当前文件内容为 log2.txt:w log2.txt## 退出当前文件:q## 不保存 并强制退出当前文件:q!## 保存并退出当前文件:wq # 更多的命令可以用 vi --help / vim --help 来查看。 Nano 1234567891011121314# 打开当前目录下的 log.txt文件，如果没有那么会新建 log.txt文件nano log.txt # 进入后直接就可以输入修改文本内容了，修改后我们可以使用这个 按键保存内容Ctrl+O # 如果不需要编辑了，那么可以用这个 按键退出当前文件Ctrl+X # 如果你在退出前已经修改但没有保存，那么会提醒你是否保存，如果保存就输入 y ，不保存输入 n# 然后就会让你输入要保存的文件名（默认原文件名，所以直接按 Enter回车即可，除非你要另存为其他文件名）Enter # 更多的命令可以在 nano 编辑界面中按 F1键 查看。 解压缩 操作在Linux中经常会下载到压缩文件，而压缩文件的格式有很多，比如 zip、rar、gz、xz、tar.gz、tar.xz等。 比较常见的就是各种 .tar、.tar.xz、.tar.gz、.tar.bz、.tar.bz2、.tar.Z 后缀压缩包，这几个的解压缩命令基本一样，说明一下参数的意义。 tar 本身只是一个打包的作用，而 .tar 后面的 .zx / .gz / .bz 等等才是压缩格式，也就是比如 log.tar.gz 压缩包，就是先用 .tar 把指定文件/文件夹打包到一起，然后再用 gz 来压缩打包后的 .tar 为 .tar.gz 。 12345678910-x 是从压缩文件提取(解压)文件出来，所以在解压命令中都有这个参数。-c ：创建一个新的压缩包文件，所以在压缩命令中都有这个参数。-f ：指定要解压的压缩包文件或要压缩的文件/文件夹，所以这个参数必须放在 解压缩命令参数的最后，然后后面跟着 要解压到压缩包文件或要压缩的文件/文件夹。-j ：解压缩 bz / bz2 格式的参数-J ：解压缩 xz / lzip 格式的参数-z ：解压缩 gz / tgz 格式的参数-Z ：解压缩 Z 格式的参数-v ：详细列出解压缩过程中处理的文件 # 更多的命令可以用 tar --help 来查看。 tar gz zip等 解压 压缩包 示例123456789101112131415161718192021222324252627282930313233343536# 解压后缀为 .tar 的压缩包tar -xf log.tar—————————————————————————————————————# 解压后缀为 .tar.xz 的压缩包tar -xJf log.tar.xz—————————————————————————————————————# 解压后缀为 .tar.gz 的压缩包，有两个方法tar -xzf log.tar.gz—————————————————————————————————————# 解压后缀为 .gz 的压缩包，有两个方法，如提示命令不存在，请安装 yum install gzip -y / apt-get install gzip -ygzip -d log.gzgunzip log.gz—————————————————————————————————————# 解压后缀为 .bz / .bz2 / tar.bz2 的压缩包，有两个方法bzip2 -d log.bzbunzip2 log.bztar -jxf log.tar.bz bzip2 -d log.bz2bunzip2 log.bz2tar -jxf log.tar.bz2—————————————————————————————————————# 解压后缀为 .Z / tar.Z 的压缩包，有两个方法uncompress log.Z log.txtuncompress log.Z log—————————————————————————————————————tar xZf log.tar.Z log.txttar xZf log.tar.Z log—————————————————————————————————————# 解压后缀为 .rar 的压缩包，如提示命令不存在，请安装 yum install unrar -y / apt-get install unrar -y ，注意 rar 和 unrar 是分开的unrar x log.rar—————————————————————————————————————# 解压后缀为 .zip 的压缩包，如提示命令不存在，请安装 yum install unzip -y / apt-get install unzip -y，注意 zip 和 unzip 是分开的unzip log.zip # 更多的命令可以用 tar --help / gzip --help / unrar --help / unzip --help 来查看。 压缩 文件/文件夹 示例123456789101112131415161718192021222324252627282930313233343536373839404142434445# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar 压缩包tar -cf log.tar log.txttar -cf log.tar log—————————————————————————————————————# 如果要压缩多个文件和文件夹，那么只需要在后面一直加下去即可tar -cf log.tar log.txt test.txt log bash—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar.xz 压缩包，以下的其他后缀压缩命令都是一样tar -cJf log.tar.xz log.txttar -cJf log.tar.xz log—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar.gz 压缩包tar -czf log.tar.gz log.txttar -czf log.tar.gz log—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.gz 压缩包gzip log.gz log.txtgzip log.gz log—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.tar.bz 压缩包暂时没查到—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.bz / log.tar.bz / log.bz2 / log.tar.bz2压缩包bzip2 -z log.txtbzip2 -z log tar cjf log.tar.bz2 log.txttar cjf log.tar.bz2 log—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.Z / log.tar.Z 压缩包compress log.txtcompress log tar cZf log.tar.Z log.txttar cZf log.tar.Z log—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.rar 压缩包，如提示命令不存在，请安装 yum install rar -y / apt-get install rar -y ，注意 rar 和 unrar 是分开的unrar a log.rar log.txtunrar a log.rar log—————————————————————————————————————# 分别压缩当前目录下的 log.txt文件 / log文件夹为 log.zip 压缩包，如提示命令不存在，请安装 yum install zip -y / apt-get install zip -y ，注意 zip 和 unzip 是分开的zip log.zip log.txtzip log.zip log # 更多的命令可以用 tar --help / gzip --help / rar --help / zip --help 来查看。 网络工具wget 下载工具wget 是Linux系统最常用的工具之一，命令行方式的多功能下载工具，支持HTTP，HTTPS和FTP协议。 参数介绍： 123456789101112131415161718# 只介绍最常用的参数# 如果提示命令不存在，那么使用 yum install wget -y / apt-get install wget -y 来安装（有一些非常精简的系统可能会没装） -b ：启动后，后台下载-q ：安静模式（不输出任何信息）-c ：断点续传下载文件-O ：指定下载后的文件名（可使用绝对路径目录+文件名）-P ：指定下载后的文件目录（-P只能指定下载目录，并不能指定文件名）-t ：设置重试次数（0代表无限）-T ：设置超时时间（单位：秒）-N ：只获取比本地新的文件（新的覆盖旧的）-4 ：仅连接至 IPv4地址-6 ：仅连接至 IPv6地址--limit-rate=xxxk :限制下载速度（k代表KB/S）--post-data ：通过POST方式发送数据--no-check-certificate ：不验证服务器的SSL证书 # 更多的命令可以用 wget --help 来查看。 使用示例： 123456789101112131415161718192021222324252627282930313233343536373839# 下载一个文件到当前目录wget https://softsmirror.cf/100MB.bin # 下载文件到当前目录并重命名为 200MB.binwget -O &quot;200MB.bin&quot; https://softsmirror.cf/100MB.bin # 下载文件到 /root目录（-P只能指定下载目录，并不能指定文件名）wget -P &quot;/root&quot; https://softsmirror.cf/100MB.bin # 下载文件到 /root/example目录并重命名为 200MB.binwget -O &quot;/root/example/200MB.bin&quot; https://softsmirror.cf/100MB.bin # 下载文件完成之前 wget进程结束了，那么可以使用断点续传重新下载中断的文件（前提是下载服务器支持断点续传）wget -c https://softsmirror.cf/100MB.bin # 通过后台下载文件到 /root/example目录并重命名为 200MB.binwget -b -O &quot;/root/example/200MB.bin&quot; https://softsmirror.cf/100MB.bin# Continuing in background, pid 2333.# Output will be written to `wget-log&apos;.# 后台下后，你可以使用以下命令来查看下载进度：tail -f wget-log # 有时候一些Linux系统中的SSL证书不完整，会导致下载一些 HTTPS网站文件的时候会验证SSL证书失败，可以这样做# 不验证服务器SSL证书，下载文件到当前目录并重命名为 200MB.binwget --no-check-certificate -O &quot;200MB.bin&quot; https://softsmirror.cf/100MB.bin # 使用wget发送POST请求数据wget --post-data &quot;user=example&amp;passwd=23333&quot; https://xxx.xx/ # 下载文件到当前目录 并仅通过IPv4连接 只获取比本地新的文件，限速 200KB/Swget --limit-rate=200k -N -4 https://softsmirror.cf/100MB.bin # 下载文件到当前目录 并重试次数为 1，超时时间为 2秒wget -t1 -T2 https://softsmirror.cf/100MB.bin # 通过 wget来获取服务器的外网IP（-qO- 代表运行完会输出下载的信息，并不会保存到本地文件）wget -qO- ipinfo.io/ip # 更多的命令可以用 wget --help 来查看。 curl 下载工具curl是Linux系统一个利用URL规则在命令行下工作的文件传输工具，是一款很强大的HTTP命令行工具。它支持文件的上传和下载，是综合传输工具，但习惯称curl为下载工具。 参数介绍： 1234567891011121314151617# 只介绍最常用的参数# 如果提示命令不存在，那么使用 yum install curl -y / apt-get install curl -y 来安装（有一些非常精简的系统可能会没装） -s ：安静模式（不会输出任何信息）-C ：断点续传下载文件-o ：输出写入到文件中-O ：输出写入到文件，文件名为 远程文件的名称-k ：不验证服务器SSL证书-T ：上传文件-4 ：仅连接至 IPv4地址-6 ：仅连接至 IPv6地址-m ：设置传输总时间（单位：秒）--retry ：设置重试次数--data ：通过POST方式发送数据--limit-rate xxxK ：限制下载速度（K代表KB/S） # 更多的命令可以用 curl --help 来查看。 使用示例： 1234567891011121314151617181920212223242526272829# 获取当前服务器的外网IPcurl ipinfo.io/ip # 获取一个文件保存到当前目录中wget -O https://softsmirror.cf/Bash/ssr.sh # 获取一个文件保存到 /root/example目录中 并修改文件名为 233.shcurl -o &quot;/root/example/233.sh&quot; https://softsmirror.cf/Bash/ssr.sh # 下载文件完成之前 curl进程结束了，那么可以使用断点续传重新下载中断的文件（前提是下载服务器支持断点续传）curl -C -O https://softsmirror.cf/100MB.bin # 有时候一些Linux系统中的SSL证书不完整，会导致访问/下载一些 HTTPS网站/文件的时候会验证SSL证书失败，可以这样做# 不验证服务器SSL证书，下载文件到当前目录并重命名为 233.shcurl -k -o &quot;233.sh&quot; https://softsmirror.cf/Bash/ssr.sh # 使用curl发送GET请求数据curl https://xxx.xx/?user=example # 使用curl发送POST请求数据curl --data &quot;user=example&amp;passwd=23333&quot; https://xxx.xx/ # 下载文件到当前目录 并仅通过IPv4连接，限速 200KB/Scurl --limit-rate 200K -4 https://softsmirror.cf/100MB.bin # 下载文件到当前目录 并重试次数为 1，超时时间为 2秒curl --retry 1 -m 10 https://softsmirror.cf/100MB.bin # 更多的命令可以用 curl --help 来查看。 netstat 查看链接和端口监听等信息参数介绍： 12345678910111213141516-n ：不显示别名（主机名/域名以 数字或IP显示）-e ：显示其他/更多信息-p ：显示进程PID/进程名-c ：持续输出（设置后会每隔 1秒输出一次，Ctrl+C 终止）-l ：显示正在监听的套接字-a ：显示全部信息 # 下面这些就不很常用了。-r ：显示路由表-i ：显示网络接口（网卡）-g ：显示多播组信息-s ：显示网络统计-M ：显示伪装连接-v ：显示正在进行的工作 # 更多的命令可以用 netstat --help 来查看。 使用示例： 12345678910111213# 显示当前服务器的所有连接信息netstat -a # 显示当前服务器的所有 TCP连接信息netstat -at # 显示当前服务器的所有 UDP连接信息netstat -au # 显示当前服务器的所有 端口监听信息netstat -lnp # 显示当前服务器的所有 TDP端口监听信息 一般来说经常使用这个命令： 1234567891011121314151617181920212223242526# 显示当前服务器的所有正在监听 TCP端口的信息，并且 显示进程PID和进程名，但不显示别名（域名以IP显示），这个命令算是最常用的了。netstat -lntp # 输出示例Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 14233/nginx.conftcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1555/sshd tcp 0 0 0.0.0.0:443 0.0.0.0:* LISTEN 14233/nginx.conftcp6 0 0 :::22 :::* LISTEN 1555/sshd—————————————————————————————————————# 显示监听 80端口的进程PID和进程名，grep是匹配并显示 符合关键词的行。netstat -lntp|grep &quot;:80&quot; # 输出示例Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 14233/nginx.conf—————————————————————————————————————# 显示 ssh的监听情况，grep是匹配并显示 符合关键词的行。netstat -lntp|grep &quot;ssh&quot; # 输出示例Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program nametcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1555/sshd 表头解释： 1234567Proto ：连接协议（tcp/udp是IPv4，tcp6/udp6是IPv6）Recv-Q ： 接收队列（基本都是0，如果不是代表堆积）Send-Q ：发送队列（基本都是0，如果不是代表堆积）Local Address ：本地地址和端口Foreign Address ：对外地址和端口State ：连接状态PID/Program name ：进程PID/进程名 12345678910111213141516171819# 每隔 1秒显示一次当前服务器的所有连接信息netstat -c # 每隔 1秒显示一次当前服务器的所有 TCP连接信息netstat -ct # 每隔 1秒显示一次当前服务器的所有 UDP连接信息netstat -cu # 显示当前服务器的路由表netstat -r # 显示当前服务器的网络接口信息（网卡）netstat -i # 显示当前服务器的网络统计信息netstat -s # 更多的命令可以用 netstat --help 来查看。 在使用 netstat命令中，会显示一些连接状态，下面是各状态的意思： 1234567891011121314151617181920212223242526272829303132LISTEN# 监听来自远程连接的 TCP端口连接请求 SYN-SENT# 在发送连接请求后，等待匹配的连接请求 SYN-RECEIVED# 在收到和发送一个连接请求后，等待对方对连接请求的确认 ESTABLISHED# 代表一个打开的连接 FIN-WAIT-1# 等待远程 TCP连接中断请求，或先前的连接中断请求的确认 FIN-WAIT-2# 从远程 TCP等待连接中断请求 CLOSE-WAIT# 等待从本地用户发来的连接中断请求 CLOSING# 等待远程TCP对连接中断的确认 LAST-ACK# 等待原来的发向远程TCP的连接中断请求的确认 TIME-WAIT# 等待足够的时间，以确保远程TCP接收到连接中断请求的确认 CLOSED# 没有任何连接状态（或者关闭了连接） 系统命令ps 查看进程信息使用示例： 12345678910# 显示当前进程信息ps -ef # 显示 ssh 进程（ grep -v grep 表示排除关键词grep，因为使用 grep匹配ssh，也会把grep自己的进程匹配进去的）ps -ef|grep -v grep|grep &apos;ssh&apos;# 输出示例UID PID PPID C STIME TTY TIME CMD #注意使用上面命令的话是不会显示表头这一行的，我只是为了更好理解加上的root 1738 1 0 01/27 ? 00:08:56 /usr/sbin/sshd # 待写... 表头解释： ：启动进程的用户12345678UID ：启动进程的用户PID ：进程标识符（进程 1代表init 是整个系统的父进程）PPID ：父进程标识符（进程 1代表init 是整个系统的父进程）C ：CPU占用率 %STIME ：启动进程的日期TTY ：终端号TIME ：进程运行时间（非休眠状态）CMD ：启动进程的命令（或进程名/进程程序所在目录） kill 结束进程1234567891011121314151617# 当我们想要结束一个进程的时候，我们可以用 kill 命令# PID是每个进程的一个唯一标识符，可以使用上面的 ps 命令来查看你要结束进程的PID。 # 假设我们要结束 Nginx的进程，那么这样做（ grep -v grep 表示排除关键词grep，因为使用 grep匹配ssh，也会把grep自己的进程匹配进去的）：ps -ef|grep -v grep|grep &quot;nginx&quot; # 输出示例UID PID PPID C STIME TTY TIME CMD #注意使用上面命令的话是不会显示表头这一行的，我只是为了更好理解加上的root 2356 1 0 04/03 ? 00:03:12 nginx # 然后我们可以看到第二列的 PID 进程标识符，然后我们 kill 即可。kill -9 2356 # 中断进程 -2 相当于 程序运行在前台，然后输入 Ctrl+C 的效果，但是进程有权利忽略，所以不一定能结束进程kill -2 PID# 强制结束进程 -9 ，注意：强制结束某个进程后，可能会造成进程数据丢失等问题！kill -9 PID free 查看内存使用信息参数介绍： 123456789101112-b ：以 字节(bytes/B) 为单位显示-k ：以 KB 为单位显示-m ：以 MB 为单位显示-g ：以 GB 为单位显示--tera ：以 TB 为单位显示-h ：以 人类易读的方式输出--si ：以 1000为单位转换，而不是 1024（1MB=1*1024KB改成 1MB=1*1000KB）-t ：显示 内存总数 行-s 时间 ：每隔 X秒输出一次（重复输出监视内存，使用 Ctrl+C 终止）-c 次数 ：每隔 1秒输出 X次 # 更多的命令可以用 free --help 来查看。 使用示例： 12345678910111213141516171819202122232425262728293031323334# 显示当前系统内存（默认 free = free -k，单位为 KB）free # 输出示例 total used free shared buffers cachedMem: 250872 237752 13120 0 34620 70520-/+ buffers/cache: 132612 118260Swap: 643064 1744 641320—————————————————————————————————————# 以单位 B/KB/MB/GB/TG 显示当前系统内存free -b / free -k / free -m / free -g / free --tera—————————————————————————————————————# 以人类易读的方式 显示当前系统内存free -h # 输出示例 total used free shared buffers cachedMem: 244M 232M 12M 0B 33M 68M-/+ buffers/cache: 129M 115MSwap: 627M 1.7M 626M—————————————————————————————————————# 以 1000为单位转换并使用 MB为单位 显示当前系统内存（1MB=1*1024KB改成 1MB=1*1000KB）free -m --si # 每隔 3秒并使用 MB为单位 显示一次当前系统内存free -ms 3 # 每隔 1秒并使用 MB为单位 显示 5次当前系统内存free -mc 5 # 每隔 2秒并使用 MB为单位 总共显示 6次当前系统内存free -m -c 6 -s 2 # 更多的命令可以用 free --help 来查看。 表头解释： 12345# 说明示例 total used free shared buffers cachedMem: 244M 232M 12M 0B 33M 69M-/+ buffers/cache: 129M 115MSwap: 627M 1.7M 626M 1234567891011121314151617181920# Mem 行，表示物理内存统计total :系统 总物理内存used :系统 已分配物理内存（但非全部都在使用，包含buffers好cached）free :系统 未分配物理内存shared :系统 共享内存，一般都是 0buffers :系统 分配但未使用的 buffers数量cached :系统 分配但未使用的 cached数量 # -/+ buffers/cache 行，表示物理内存的缓存统计used :系统 实际使用的内存# user= Mem行 used-buffers-cached（232-33-69=130，因单位转换问题 所以会有一点差距）free :系统 实际可用的内存# free= Mem行 free+buffers+cached（12+33+69=114，因单位转换问题 所以会有一点差距） # 所以我们看系统的真实 使用/剩余内存 只需要看这一行即可！ # Swap 行，表示硬盘的交换分区（虚拟内存）统计total :系统 总虚拟内存used :系统 已分配虚拟内存free :系统 未分配虚拟内存 date 查看/设置 系统时间参数介绍： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 -d ：以指定的时间格式 显示时间 -f ：显示 DATE FILE文件中的每行时间（我也不懂） -r ：显示 文件/文件夹 最后修改时间 -s ：设置 系统时间 -u ：显示 UTC时间 # 时间格式 %% - 显示字符%%a - 星期几的缩写(Sun..Sat)%A - 星期几的完整名称（Sunday...Saturday）%b - 月份的缩写(Jan..Dec)%B - 月份的完整名称(January..December)%c - 日期与时间。只输入date指令也会显示同样的结果%C - 世纪(年份除100后去整) [00-99]%d - 日期(以01-31来表示)。%D - 日期(含年月日)。%e - 一个月的第几天 ( 1..31)%F - 日期，同%Y-%m-%d%g - 年份(yy)%G - 年份(yyyy)%h - 同%b%H - 小时(00..23)%I - 小时(01..12)%j - 一年的第几天(001..366)%k - 小时( 0..23)%l - 小时( 1..12)%m - 月份(01..12)%M - 分钟(00..59)%n - 换行%N - 纳秒(000000000..999999999)%p - AM or PM%P - am or pm%r - 12小时制时间(hh:mm:ss [AP]M)%R - 24小时制时间(hh:mm)%s - 从00:00:00 1970-01-01 UTC开始的秒数%S - 秒(00..60)%t - 制表符%T - 24小时制时间(hh:mm:ss)%u - 一周的第几天(1..7); 1 表示星期一%U - 一年的第几周，周日为每周的第一天(00..53)%V - 一年的第几周，周一为每周的第一天 (01..53)%w - 一周的第几天 (0..6); 0 代表周日%W - 一年的第几周，周一为每周的第一天(00..53)%x - 日期(mm/dd/yy)%X - 时间(%H:%M:%S)%y - 年份(00..99)%Y - 年份 (1970…)%z - RFC-2822 风格数字格式时区(-0500)%Z - 时区(e.g., EDT), 无法确定时区则为空 # 更多的命令可以用 date --help 来查看。 使用示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 显示 当前系统时间date# 输出：Wed Apr 5 12:38:44 CST 2017 # 显示当前系统的 UTC时间date -u# 输出：Wed Apr 5 04:30:06 UTC 2017 # 显示 log.txt 文件的最后修改时间date -r log.txt # 显示 当前日期的年份date +%Y# 输出：2017 # 显示 当前日期的月份date +%m# 输出：4 # 显示 各种格式类型的日期date +%D# 输出：04/05/17 date +%Y-%m-%d# 输出：2017-04-05 date +%m/%d/%y# 输出：04/05/17 date +%m/%d/%Y# 输出：04/05/2017 # 显示 Unix时间戳date +%s# 输出：1491367399 # 显示一个完整的时间（年、月、日、小时、分钟、秒钟、周几 时区）date &quot;+%Y-%m-%d %H:%M:%S %u %Z&quot;# 输出：2017-04-05 12:12:15 3 CST # 设置 系统时间（年、月、日）date -s &quot;2017-04-05&quot; # 设置 系统时间（小时、分钟、秒钟）date -s &quot;10:29:05&quot; # 设置 系统时间（年、月、日、小时、分钟、秒钟）date -s &quot;2017-04-05 10:29:05&quot; # 更多的命令可以用 date --help 来查看。 修改时区为上海（北京）时区的方法： 1/cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 然后再用date查看时间，就会发现时区变为 CST 了。 chmod 修改 文件/文件夹 权限参数介绍： 1234567891011121314151617181920212223242526272829303132333435-c :只输出被改变权限的文件信息-f :当chmod不能改变文件模式时，不通知文件的用户-R :可递归遍历子目录，把修改应到目录下所有文件和子目录-v :无论修改是否成功，输出每个文件的信息 # 操作符号： + :添加某个权限。- :取消某个权限。= :赋予给定权限并取消其他所有权限（如果有的话）。 # 权限设置字母： r :可读w :可写x :可执行X :只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性s :在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位t :保存程序的文本到交换设备上u :当前用户的权限g :当前用户同组的权限o :其他用户的权限 # 权限设定数字： # 数字表示的属性含义：0 ：表示没有权限1 ：表示可执行权限2 ：表示可写权限4 ：表示可读权限 # 然后将其相加，所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。# 如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝6（读/写）。 # 更多的命令可以用 chmod --help 来查看。 使用示例： 123456789101112131415# 当需要运行 可执行的脚本或者程序（比如 Go语言编写的软件）的时候，需要赋予执行权限chmod +x ssr.sh # 赋予 log.txt 文件可读权限chmod 444 log.txt # 赋予 /ver/log 文件夹 可读、可写权限chmod 666 log.txt # 赋予 /home/www 文件夹 可读、可写、可执行权限chmod 777 log.txt # 赋予 /home/www 文件夹极其所有子目录和文件 可读、可写、可执行权限chmod -R 777 log.txt# 更多的命令可以用 chmod --help 来查看。 uname 获取操作系统信息 参数介绍： 1234567891011-a：显示 全部信息-m：显示 系统位数-n：显示 主机名称-r：显示 操作系统的发行编号-s：显示 操作系统的名称-v：显示 操作系统的版本-p：输出 处理器类型 或&quot;unknown&quot;-i：输出 硬件平台 或&quot;unknown&quot;-o：输出 操作系统名称 # 更多的命令可以用 uname --help 来查看。 使用示例： 1234567891011121314151617181920212223242526272829root@example:~# uname #在使用 uname 的时候，相当于是使用 uname -sLinux root@example:~# uname -aLinux example 4.9.75-040975-generic #1 SMP Thu Oct 27 16:59:03 MSK 2016 x86_64 GNU/Linux root@example:~# uname -m #输出一般是64位: x86_64 / 32位: i386 或分支 i686 x86_64 # 系统位数 root@example:~# uname -nexample # 服务器名（往往购买服务器时会让你填写） root@example:~# uname -r4.9.75-040975-generic # 系统当前内核（主） root@example:~# uname -sLinux root@example:~# uname -v#1 SMP Thu Oct 27 16:59:03 MSK 2016 root@example:~# uname -punknown root@example:~# uname -iunknown root@example:~# uname -oGNU/Linux 我只是暂时把我想到的写出来了，我还会继续慢慢添加的，有什么建议可以在下面留言评论。]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Caddy FileBrowser扩展部署私人网盘]]></title>
    <url>%2Ffilemanager.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月26日14:40可能会因为没有更新而失效，如已失效或需要修正，请留言！ Caddy FileBrowser扩展介绍FileBrowser 是基于Caddy 的扩展。它提供文件管理界面，可用于 上传/下载/删除/预览和重命名 等该目录中的文件。 支持 上传文件支持 按类型 搜索文件支持 批量压缩 文件下载支持 多用户管理(权限可控)支持 在网页执行 Linux命令支持 创建 共享链接(限时/永久)支持 在线编辑 各类文本文件支持 在线浏览 图片/文本/视频等支持 新建/重命名/移动/删除 文件和文件夹等部署简单，几步完成，无需任何依赖环境等等 … Caddy 文档：https://caddyserver.com/docs/http.filemanager Github 项目：https://github.com/filebrowser/filebrowser 安装 Caddy12345wget -N --no-check-certificate https://raw.githubusercontent.com/lixint/blogfile/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager# 如果你要同时安装多个 Caddy 插件，那么请修改下面的命令格式为：# bash caddy_install.sh install http.filemanager,http.xxx,http.xxx# 英文半角逗号分隔多个插件名称# 注意并不能单独安装一个扩展，所以如果你要新安装扩展，请执行上面的命令安装 Caddy 并加上你要安装的所有扩展的名称 安装Caddy成功后，继续新建一个用于使用的虚拟主机文件夹，例如 file（可以自己改）： 1mkdir /usr/local/caddy/www &amp;&amp; mkdir /usr/local/caddy/www/file 配置 Caddy首先，我们先讲一下，FileBrowser扩展各个参数。 123filemanager [url] [scope] &#123; database path&#125; url 是要设置的网站URL。默认是 / (比如 /disk 那么访问入口就是 http://ip/disk )。 scope 是要浏览的服务器文件目录路径，可以使相对或绝对路径。默认是 ./ (服务器上面文件的绝对或相对路径)。 database path 是 filemanager 的数据库路径（如果不写这个参数，则默认就是 /usr/local/caddy/filemanager.db） 配置示例以下示例中，虚拟主机文件夹皆为 /usr/local/caddy/www/file 示例域名皆为 example.com IP HTTP本示例是，绑定虚拟主机为IP（即通过IP访问），HTTP协议（80端口）。 123456789# 以下全部内容是一个整体，是一个命令，修改后全部复制粘贴到SSH软件中并一起执行！echo &quot;:80 &#123; root /usr/local/caddy/www/file timeouts none gzip filemanager / /usr/local/caddy/www/file &#123; database /usr/local/caddy/filemanager.db &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile 域名 HTTP本示例是，绑定虚拟主机为域名（即通过域名访问），HTTP协议（80端口）。 123456789# 以下全部内容是一个整体，是一个命令，修改后全部复制粘贴到SSH软件中并一起执行（注意替换示例域名）！echo &quot;http://example.com &#123; root /usr/local/caddy/www/file timeouts none gzip filemanager / /usr/local/caddy/www/file &#123; database /usr/local/caddy/filemanager.db &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile 域名 HTTPS本示例是，绑定虚拟主机为域名（即通过域名访问），HTTPS协议（443端口）。 如果你有 SSL证书和密匙的话，把 SSL证书(xxx.crt)和密匙(xxx.key)文件放到/root文件夹下（也可以是其他文件夹，自己改下面代码），然后这样做： 12345678910# 以下全部内容是一个整体，是一个命令，修改后全部复制粘贴到SSH软件中并一起执行（注意替换示例域名）！echo &quot;example.com &#123; root /usr/local/caddy/www/file timeouts none tls /root/xxx.crt /root/xxx.key gzip filemanager / /usr/local/caddy/www/file &#123; database /usr/local/caddy/filemanager.db &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile 如果你没有 SSL证书和密匙，那么你可以这样做： 下面的xxxx@xxx.xx改成你的邮箱，同时需要注意的是，申请 SSL证书前，请务必提前解析好域名记录(解析后最好等一会，以全球生效)，否则 Caddy会申请并配置失败！ 12345678910# 以下全部内容是一个整体，是一个命令，修改后全部复制粘贴到SSH软件中并一起执行（注意替换示例域名）！echo &quot;example.com &#123; root /usr/local/caddy/www/file timeouts none tls xxxx@xxx.xx gzip filemanager / /usr/local/caddy/www/file &#123; database /usr/local/caddy/filemanager.db &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile 域名 HTTP重定向 HTTPS(仅手动指定SSL证书和密匙)本示例是，域名HTTP重定向为HTTPS。 当你是手动指定 SSL证书和密匙 来配置的话，Caddy只会监听 443端口(https)，并不会自动设置 80端口(http)的重定向，如果要做重定向的话，可以这样做： 下面的示例代码中，是把 http://example.com 重定向到了 https://example.com 。 1234567891011121314# 以下全部内容是一个整体，是一个命令，修改后全部复制粘贴到SSH软件中并一起执行（注意替换示例域名）！echo &quot;http://toyoo.pw &#123; timeouts none redir https://toyoo.pw&#123;url&#125;&#125;toyoo.pw &#123; root /usr/local/caddy/www/file timeouts none tls /root/xxx.crt /root/xxx.key gzip filemanager / /usr/local/caddy/www/file &#123; database /usr/local/caddy/filemanager.db &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile 当你已经配置完上面步骤后，那就需要启动Caddy了。 12/etc/init.d/caddy start# 如果启动失败可以看Caddy日志： tail -f /tmp/caddy.log FileBrowser 使用说明配置并打开网站后，默认账号和密码都是 admin，可以登陆后修改。[Settings] 切换中文进入后可以点击左边侧栏 [Settings] 进入设置页面，然后选择 [language - Chinese (Simplified)] ，并点击右下角第一个 [Update] 按钮更新。 使用技巧一些按键有对应的作用： F1 - 查看帮助 F2 - 重命名 文件/文件夹 DEL - 删除所选 文件/文件夹 ESC - 清除当前选择 或 关闭提示 CTRL + S - 保存下载 文件/文件夹（zip压缩） CTRL + 鼠标左键 单击 - 选择多个文件/文件夹 鼠标左键 双击 - 打开文件/文件夹 鼠标左键 单击 - 选择文件/文件夹 Caddy 使用说明启动：/etc/init.d/caddy start 停止：/etc/init.d/caddy stop 重启：/etc/init.d/caddy restart 查看状态：/etc/init.d/caddy status 查看Caddy启动日志： tail -f /tmp/caddy.log Caddy配置文件位置：/usr/local/caddy/Caddyfile FileBrowser数据库位置：/usr/local/caddy/filemanager.db Caddy自动申请SSL证书位置：/.caddy/acme/acme-v02.api.letsencrypt.org/sites/xxx.xxx(域名)/ 升级FileBrowser因为FileBrowser是Caddy的扩展，是融合成一个文件的，升级FileBrowser=升级Caddy（加扩展），所以只需要重新执行下面的命令覆盖安装Caddy即可（只会覆盖 Caddy自身，不影响配置文件），覆盖安装后启动Caddy即可（ /etc/init.d/caddy start ）。 1wget -N --no-check-certificate https://raw.githubusercontent.com/lixint/blogfile/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh install http.filemanager 卸载只需要把安装命令 install 改成 uninstall 就是卸载了，因为扩展是集成于Caddy中的，所以无法单独卸载某个扩展。 1wget -N --no-check-certificate https://raw.githubusercontent.com/lixint/blogfile/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh uninstall 其他说明启动显示成功，但是实际未运行因为 服务脚本判断的问题，只判断了nohub是否运行 Caddy成功，但没有判断 Caddy 是否保持正常运行。 你可以理解为，nohub成功启动了 Caddy，但是 Caddy因为配置文件错误等原因，启动后又退出了。 所以这种情况下，你应该去查看启动日志： 1tail -f /tmp/caddy.log 单网站/多网站当然，上面的几个示例，实际上都算是单网站。 最后一句代码都是 }&quot; &gt; /usr/local/caddy/Caddyfile ，也就是清空了 Caddy配置文件，然后再写入了配置信息。 如果你要设置多个网站，那么把最后一句代码改成 }&quot; &gt;&gt; /usr/local/caddy/Caddyfile 即可，注意是把 &gt; 改成 &gt;&gt;，这样就不会清空原来的配置信息了，而是会把要添加的配置信息加到配置文件最后！ Caddy下载文件频繁中断可能是因为 Caddy的超时时间机制导致的，可以在配置文件中加入这句代 码timeouts none ，例如这样： 1http://example.com ( timeouts none root /home/www ...(省略号代表 这下面的内容是重复的，请不要直接写省略号到配置文件中)) Caddy启动失败，打开 http://ip 显示的是 It works !一些系统会自带 apache2 ，而 apache2 会占用80端口，导致Caddy无法绑定端口，所以只要关掉就好了。 1netstat -lntp# 我们可以通过这个命令查看是不是被其他软件占用了 80 端口。 不过 apache2 会默认开机自启动，如果不需要可以关闭自启动或者卸载 apache2 。 停止 Apache2 1/etc/init.d/apache2 stop# 尝试使用上面这个关闭，如果没效果或者提示什么错误无法关闭，那就用下面这个强行关闭进程。kill -9 $(ps -ef|grep &quot;apache2&quot;|grep -v &quot;grep&quot;|awk &apos;&#123;print $2&#125;&apos;) 取消开机自启动 1# 以下代码仅限 Debian/Ubuntu 系统 #update-rc.d -f apache2 remove 卸载 Apache2 1# 以下代码仅限 Debian/Ubuntu 系统 #apt-get remove --purge apache2 关闭 Apache2后，就可以尝试启动 Caddy ，并试试能不能打开网页。 1/etc/init.d/caddy start 启动 Caddy后，无法访问这个可能是防火墙的问题，开放防火墙端口即可。 1iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPTiptables -I INPUT -m state --state NEW -m udp -p udp --dport 端口 -j ACCEPT # 删除防火墙规则，内容一样把 -I 换成 -D 就行了：iptables -D INPUT -m state --state NEW -m tcp -p tcp --dport 端口 -j ACCEPTiptables -D INPUT -m state --state NEW -m udp -p udp --dport 端口 -j ACCEPT FileBrowser账号密码忘了或想要重置账号信息FileBrowser没有找回密码功能，所以一旦你忘记了密码，那么GG，不过没事 有办法重置。 当然我们可以重置FileBrowser的数据库文件来清除所有账号信息，这样我们就变成初始账号和密码了(admin/admin)。 1注意：删除数据库文件只会影响数据库内储存的各账号信息，并不会影响服务器本地的文件夹/文件。 很简单，关闭Caddy，然后删除FileBrowser数据库文件，启动Caddy，使用初始账号密码登陆。 1/etc/init.d/caddy stoprm -rf /usr/local/caddy/filemanager.db/etc/init.d/caddy start 本文转载自逗比根据地，转载请注明来源。]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>私人网盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用pyenv与virtualenv进行Python多版本与多环境管理]]></title>
    <url>%2Fpyenv.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月26日17:08可能会因为没有更新而失效，如已失效或需要修正，请留言！ 最近在捣鼓Linux上的Python安装，因为Linux上默认带着的是Python2，要想安装Python3，需要一阵折腾。结果安装完发现没法用SSL，导致部分网络相关的库有时候没法用。偶然发现了一个Python版本管理工具，装了一下感觉非常好，在这记录一下安装过程。 pyenv 用于管理Python版本，virtualenv管理不同的工作环境。 环境：Centos 7 64位 使用pyenv管理不同的Python版本我们直接从github上clone项目到本地，然后，分别执行以下命令进行安装即可： 1$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv 配置 123$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bash_profile$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bash_profile 安装完成以后，执行以下命令，以使~/.bash_profile中的配置生效。 1$ source ~/.bash_profile 至此，pyenv就安装完成了，我们可以通过下面的命令验证pyenv是否正确安装以及获取pyenv的帮助信息： 123456789101112131415161718$ pyenv --helpUsage: pyenv &lt;command&gt; [&lt;args&gt;]Some useful pyenv commands are: commands List all available pyenv commands local Set or show the local application-specific Python version global Set or show the global Python version shell Set or show the shell-specific Python version install Install a Python version using python-build uninstall Uninstall a specific Python version rehash Rehash pyenv shims (run this after installing executables) version Show the current Python version and its origin versions List all Python versions available to pyenv which Display the full path to an executable whence List all Python versions that contain the given executableSee `pyenv help &lt;command&gt;' for information on a specific command.For full documentation, see: https://github.com/yyuu/pyenv#readme 使用pyenv 我们通过pyenv的install命令，可以查看pyenv当前支持哪些Python版本，如下所示： 123456pyenv install --listAvailable versions: 3.6.0 3.6-dev 3.7-dev ... 使用pyenv安装不同的Python版本： 12pyenv install -v 3.6.0pyenv install -v 2.7.13 安装Python之前先安装一下相关依赖，避免安装时报错： 12345678#更新源yum updateyum install gcc gcc-c++ autoconf automakeyum install -y zlib-devel bzip2-devel xz-libs wget openssl-develyum install readline readline-devel readline-static -yyum install openssl openssl-devel openssl-static -yyum install sqlite-devel -yyum install bzip2-devel bzip2-libs -y 查看当前系统中包含的Python版本： 1234$ pyenv versions* system (set by /home/lmx/.pyenv/version) 2.7.13 3.6.0 由于我们安装了2个Python版本，加上我们系统自身的Python，当前系统中存在3个不同的Python版本。其中，输出结果前面的”*”表示当前正在使用的版本。我们也可以通过pyenv global选择不同的Python版本，如下所示： 12345678910111213141516$ pyenv global 3.6.0$ pyenv versions system 2.7.13* 3.6.0 (set by /home/lmx/.pyenv/version)$ pythonPython 3.6.0 (default, Feb 8 2017, 15:53:33)[GCC 4.7.2] on linuxType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; exit()$ pyenv global 2.7.13$ pythonPython 2.7.13 (default, Feb 8 2017, 16:03:42)[GCC 4.7.2] on linux2Type "help", "copyright", "credits" or "license" for more information. 使用pyenv以后，可以快速地切换Python的版本。切换Python版本以后，与版本相关的依赖也会一起切换。因此，我们不用担心不同的版本在系统中是否会相互干扰。例如，切换Python版本以后，相应的pip也会跟着切换，所以不用担心自己用pip版本和Python版本不匹配的问题，如下所示： 123456$ pyenv global 3.6.0$ pip --versionpip 9.0.1 from /home/lmx/.pyenv/versions/3.6.0/lib/python3.6/site-packages (python 3.6)$ pyenv global 2.7.13$ pip --versionpip 9.0.1 from /home/lmx/.pyenv/versions/2.7.13/lib/python2.7/site-packages (python 2.7) 如果想要删除Python版本，则使用uninstall命令。如下所示： 1pyenv uninstall 2.7.10 使用virtualenv管理不同的项目virtualenv本身是一个独立的项目，用以隔离不同项目的工作环境。例如，用户lmx希望在项目A中使用Flask 0.8这个版本，与此同时，又想在项目B中使用Flask 0.9这个版本。如果我们全局安装Flask，必然无法满足用户的需求。这个时候，我们就可以使用virtualenv。 读者需要注意pyenv和virtualenv的区别。pyenv用以管理不同的Python版本，例如，你的系统工作时使用Python 2.7.13，学习时使用Python 3.6.0。virtualenv用以隔离项目的工作环境，例如，项目A和项目B都是使用Python 2.7.13，但是，项目A需要使用Flask 0.8版本，项目B需要使用Flask 0.9版本。我们只要组合pyenv和virtualenv这两个工具，就能够构造Python和第三方库的任意版本组合，拥有了很好的灵活性，也避免了项目之间的相互干扰。 virtualenv本身是一个独立的工具，用户可以不使用pyenv单独使用virtualenv。但是，如果你使用了pyenv，就需要安装pyenv-virtualenv插件而不是virtualenv软件来使用virtualenv的功能。 pyenv/pyenv-virtualenv 安装和使用pyenv-virtualenv插件如下所示： 12$ git clone https://github.com/yyuu/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv$ echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bash_profile 与安装pyenv类似，安装完成以后需要重新载入配置文件，或者退出用户再登录，以使得配置文件生效： 1234567$ source ~/.bash_profile$ pyenv help virtualenvUsage: pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version] &lt;virtualenv-name&gt; pyenv virtualenv --version pyenv virtualenv --help -f/--force Install even if the version appears to be installed already pyenv-virtualenv使用 有了pyenv-virtualenv以后，我们可以为同一个Python解释器，创建多个不同的”工作环境”。例如，我们新建两个工作环境： 12$ pyenv virtualenv 2.7.13 first_project$ pyenv virtualenv 2.7.13 second_project 可以使用virtualenvs子命令查看工作环境： 12345$ pyenv virtualenvs 2.7.13/envs/first_project (created from /home/lmx/.pyenv/versions/2.7.13) 2.7.13/envs/second_project (created from /home/lmx/.pyenv/versions/2.7.13) first_project (created from /home/lmx/.pyenv/versions/2.7.13) second_project (created from /home/lmx/.pyenv/versions/2.7.13) 创建完工作环境以后，可以通过activate和deactivate子命令进入或退出一个工作环境。进入工作环境以后，左边的提示符会显示你当前所在的工作环境，以免因为环境太多导致误操作。 123$ pyenv activate first_project(first_project) $ pip install flask==0.8(first_project) $ pyenv deactivate 接下来，我们看一下在不同的工作环境安装不同的Flask版本： 12345$ pyenv activate first_project(first_project) $ pip install flask==0.8(first_project) $ pyenv deactivate$ pyenv activate second_project(second_project) $ pip install flask==0.9 如果想要删除虚拟环境，则使用： 1pyenv virtualenv-delete first_project 使用pyenv和python-virtualenv插件，我们就能够自由地在不同的版本之间进行切换，相比管理Python版本，不但节省了时间，也避免了工作过程中的相互干扰。 参考： https://zhuanlan.zhihu.com/p/27294128 https://blog.csdn.net/GX_1_11_real/article/details/80237064]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown入门教程]]></title>
    <url>%2Fmarkdown.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月11日21:31可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 个人推荐使用Typora编辑器。当然有一些在线Markdown编辑器也很好用，大家可以按需自己网上搜索使用。 斜体和粗体 代码：1234*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~ 显示效果： 这是一段斜体这是一段粗体这是一段加粗斜体这是一段删除线 分级标题第一种写法：12345这是一个一级标题============================这是一个二级标题-------------------------------------------------- 就是在文字的下一行增加不同的横线，不建议使用。 第二种写法：123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 推荐使用这种方式，简单易记，不同级别的标题后面的#不一样多，在#后需要空一格。 同学们自己在编辑器中观察，很简单，一级标题字号最大，依级递减。 超链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。 行内式语法说明：[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 &quot;链接标题&quot;)这样的形式。链接地址与链接标题前有一个空格。代码： 12欢迎来到[我的博客](https://lixint.github.io)欢迎来到[我的博客](https://lixint.github.io &quot;LixT&apos;s Blog&quot;) 显示效果：欢迎来到我的博客欢迎来到我的博客 这一个设置了标题，在鼠标指针指在超链接上的时候会显示标题。 参考式参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。语法说明：参考式链接分为两部分，文中的写法[链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。 如果链接文字本身可以做为链接标记，你也可以写成[链接文字][][链接文字]：链接地址的形式，见代码的最后一行。 代码：123456我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3][Leanote 笔记][2]是一个不错的[网站][]。[1]:http://www.google.com &quot;Google&quot;[2]:http://www.leanote.com &quot;Leanote&quot;[3]:https://lixint.github.io &quot;LixT&apos;s Blog&quot;[网站]:http://http://blog.leanote.com/freewalk 显示效果：我经常去的几个网站Google、Leanote以及自己的博客Leanote 笔记是一个不错的网站。 自动链接语法说明：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 代码：12&lt;https://lixint.github.io/&gt;&lt;address@example.com&gt; 显示效果：https://lixint.github.io/address@example.com 锚点网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意： Markdown Extra 只支持在标题后插入锚点，其它地方无效。 Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。 语法描述：在你准备跳转到的指定标题后插入锚点{#标记}，然后在文档的其它地方写上连接到锚点的链接。 代码： 12### 目录&#123;#index&#125;跳转到[目录](#index) 显示效果：跳转到目录注意此项不能在Hexo博客中使用，Hexo博客会将{}中的内容进行渲染，从而引起未知错误 列表无序列表使用 *，+，-表示无序列表。代码：123- 无序列表项 一- 无序列表项 二- 无序列表项 三 显示效果： 无序列表项 一 无序列表项 二 无序列表项 三 有序列表 有序列表则使用数字接着一个英文句点。代码：1231. 有序列表项 一2. 有序列表项 二3. 有序列表项 三 显示效果： 有序列表项 一 有序列表项 二 有序列表项 三 定义型列表语法说明： 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)代码： 12345Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 显示效果：Markdown: 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）​ 代码块（左侧有八个不可见的空格） 列表缩进语法说明： 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。但是如果你懒，那也行：代码：1234567* 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ * 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 显示效果： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 包含段落的列表语法说明： 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： 代码：1234567* 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ * 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 显示效果： 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ 那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。 5.5. 包含引用的列表语法说明：如果要在列表项目内放进引用，那 &gt; 就需要缩进： 代码：1234* 阅读的方法: &gt; 打开书本。 &gt; 打开电灯。 &gt; 显示效果： 阅读的方法: 打开书本。打开电灯。显示效果： 包含代码区块的引用语法说明：如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： 一列表项包含一个列表区块： &lt;代码写在这&gt; 一个特殊情况在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：11986.What a great season. 会显示成： What a great season. 前面的1986成了序号 换句话说，也就是在行首出现了数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：11986\. What a great season. 会显示成：1986. What a great season. 引用语法说明：引用需要在被引用的文本前加上&gt;符号。代码：123456&gt; 这是一个有两段文字的引用&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt;&gt; 无意义的占行文字3.&gt; 无意义的占行文字4. 显示效果： 这是一个有两段文字的引用无意义的占行文字1.无意义的占行文字2. 无意义的占行文字3.无意义的占行文字4. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： 代码：12345&gt; 这是一个有两段文字的引用无意义的占行文字1.无意义的占行文字2.无意义的占行文字3.无意义的占行文字4. 显示效果： 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.无意义的占行文字3.无意义的占行文字4. 引用的多层嵌套区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 代码：123&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt;&gt;&gt; 教程在哪？ - 小白 显示效果： 请问 Markdwon 怎么用？ - 小白 自己看教程！ - 愤青 教程在哪？ - 小白 引用其它要素引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 代码：1234567&gt; 1. 这是第一行列表项。&gt; 2. 这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt; return shell_exec(&quot;echo $input | $markdown_script&quot;);&gt;`return shell_exec(&quot;echo $input | $markdown_script&quot;);` 显示效果： 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); return shell_exec(&quot;echo $input | $markdown_script&quot;); 插入图像图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。 语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。 行内式语法说明：![图片Alt](图片地址 &quot;图片Title&quot;) 代码：12美丽花儿： ![美丽花儿](http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg &quot;美丽花儿&quot;) 显示效果： 参考式语法说明： 在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 “Title”代码：123美丽花儿：![美丽花儿][flower][flower]:http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg &quot;美丽花儿&quot; 显示效果：![美丽花儿][flower][flower]:http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg “美丽花儿” Hexo博客解析不出这个语法，所以在写博客的时候尽量不要用这个格式了。 内容目录在段落中填写 [TOC] 以显示全文内容的目录结构。 Hexo博客对目录的解析似乎也有限，请在Markdown编辑器中自行尝试。Next主题的话是也可以自动生成目录的，所以不需要额外增加目录。 注脚语法说明：在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。 代码：1234使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]: Markdown是一种纯文本标记语言[^2]: HyperText Markup Language 超文本标记语言[^Le]: 开源笔记平台，支持Markdown和笔记直接发为博文 显示效果：使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]: Markdown是一种纯文本标记语言[^2]: HyperText Markup Language 超文本标记语言[^Le]: 开源笔记平台，支持Markdown和笔记直接发为博文 注：脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方。 LaTeX 公式$ 表示行内公式：代码： 1质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 显示效果：质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。 注意：我的博客没有开启公式显示，所以可能公式显示不准确，请自己用Markdown编辑器查看效果 $ 表示整行公式：代码：123$$\sum_&#123;i=1&#125;^n a_i=0$$$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$$$\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;$$ 访问 MathJax 参考更多使用方法。 表格语法说明： 不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。代码：1234567简单方式写表格：学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92 1234567原生方式写表格：| 学号 | 姓名 | 分数 || ---- | ---- | ---- || 小明 | 男 | 75 || 小红 | 女 | 79 || 小陆 | 男 | 92 | 123456为表格第二列指定方向：| 产品 | 价格 || ---------------- | -------: || Leanote 高级账号 | 60元/年 || Leanote 超级账号 | 120元/年 | 显示效果：简单方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 原生方式写表格： 学号 姓名 分数 小明 男 75 小红 女 79 小陆 男 92 为表格第二列指定方向： 产品 价格 Leanote 高级账号 60元/年 Leanote 超级账号 120元/年 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 代码：12345* * *********- - ---------------------------------------- 显示效果都一样： 代码对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在ESC键下方）包裹代码。 语法说明： 插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。插入多行代码，可以使用缩进或者“code “,具体看示例。注意： 缩进式插入前方必须有空行 行内式代码：1C语言里的函数 `scanf()` 怎么使用？ 显示效果：C语言里的函数 scanf() 怎么使用？ 缩进式多行代码缩进 4 个空格或是 1 个制表符 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 代码：12345#include &lt;stdio.h&gt;int main(void)&#123; printf(&quot;Hello world\n&quot;);&#125; 显示效果：​ #include &lt;stdio.h&gt;​ int main(void)​ {​ printf(“Hello world\n”);​ } 用三个”`”包裹多行代码这个不太好演示，请自行体验，输入三个`后空一行写代码， 结束后另起一行输入三个`表示代码块结束 HTML 原始码Markdown支持很多HTML代码，具体请自行体验]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题修改第二弹]]></title>
    <url>%2Fnext2.html</url>
    <content type="text"><![CDATA[修改文章内链接文本样式修改文件 themes\next\source\css\_common\components\post\post.styl，在末尾添加如下css样式。 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。 修改文章底部的那个带#号的标签效果 修改模板/themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;，此处的图标用的是Font-Awesome，可以根据需要换成其他的图标。 在每篇文章末尾统一添加“本文结束”标记在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后打开主题配置文件,在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 博文压缩安装插件，在站点的根目录下执行以下命令： 12npm install gulp -gnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 博客根目录新建文件 gulpfile.js，填入软下代码： 1`var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);// 压缩 public 目录 cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 压缩 public 目录 htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;))&#125;);// 压缩 public/js 目录 jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp.src(&apos;./public/**/*.js&apos;) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;));&#125;);// 执行 gulp 命令时执行的任务gulp.task(&apos;default&apos;, [ &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;]);` 生成博文时执行 hexo g &amp;&amp; gulp 就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。 修改行内代码块代码颜色打开\themes\next\source\css\_custom\custom.styl,向里面加入：(颜色可以自己定义)。 123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 在网站底部加上访问量打开主题配置文件搜索busuanzi_count，对如下项目将false设置为true。其中的icon项目使用的也是Font-Awesome。total项为站点总统计，显示在站点首页底部，分为total_visitors：总访问人数，total_views：总访问量。post_views为文章访问量，显示在文章页面的标题下方。 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 注意：不蒜子之前更新过一次，Next主题如果设置后不生效请检查一下themes\next\layout\_third-party\analyticsbusuanzi-counter.swig文件中的链接是否是https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js 添加 README.md 文件每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。 在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为 1skip_render: README.md 保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。 在文章底部增加版权信息最新版本的Next主题是内置了版权信息的，主题配置文件搜索post_copyright设置为true即可。 如果没有这个项目，可以按照以下方法添加自定义版权信息： 在目录 next/layout/_macro/下添加 my-copyright.swig： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src="https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); $(".fa-clipboard").click(function()&#123; clipboard.on('success', function()&#123; swal(&#123; title: "", text: '复制成功', icon: "success", showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在目录next/source/css/_common/components/post/下添加my-post-copyright.styl： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改next/layout/_macro/post.swig，在代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 之前添加增加如下代码： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 修改next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： 1@import &quot;my-post-copyright&quot; 保存重新生成即可。如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置copyright: true。 小技巧：如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加copyright项目 这样每次hexo new &quot;你的内容&quot;之后，生成的md文件会自动把copyright:加到里面去。 文章加密访问打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码： 1234567891011121314&lt;script&gt; (function () &#123; if ('&#123;&#123; page.password &#125;&#125;') &#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;') &#123; alert('密码错误！'); if (history.length === 1) &#123; location.replace("http://xxxxxxx.xxx"); // 这里替换成你的首页 &#125; else &#123; history.back(); &#125; &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章上写成类似这样： ###]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用小工具汇总]]></title>
    <url>%2Ftools.html</url>
    <content type="text"><![CDATA[本文最后更新于2019年01月02日17:21可能会因为没有更新而失效，如已失效或需要修正，请留言！ 实用网站查询ip地址位置与运营商 mediafile网盘 实用软件DiskGenius 2016激活工具 win64管理小箭头 数学公式编辑器MathType6.9b破解版 环境变量修改RapidEEx64 路由跟踪]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客常见错误分析]]></title>
    <url>%2Ferrortype.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日11:14可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 常见错误分析以下是常见的错误类型： YAML 解析错误 12JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:last_updated: Last updated: %s 如果 YAML 字符串中包含冒号（:）的话，请加上引号。 12JS-YAML: bad indentation of a mapping entry at line 18, column 31:last_updated:&quot;Last updated: %s&quot; 请确认您使用空格进行缩进（Soft tab），并确认冒号后有加上一个空格。 您可参阅YAML 规范以取得更多信息。 EMFILE 错误1Error: EMFILE, too many open files 虽然 Node.js 有非阻塞 I/O，同步 I/O 的数量仍被系统所限制，在生成大量静态文件的时候，您可能会碰到 EMFILE 错误，您可以尝试提高同步 I/O 的限制数量来解决此问题。1$ ulimit -n 10000 （这一命令只对Linux系统有效） Git 部署问题1fatal: &apos;username.github.io&apos; does not appear to be a git repository 请确认您已经在电脑上配置 git，或改用 HTTPS 库（repository）地址。 服务器问题1Error: listen EADDRINUSE 您可能同时开启两个 Hexo 服务器，或者有其他应用程序正在占用相同的端口，请尝试修改 port 参数，或是在启动 Hexo 服务器时加上 -p 选项。1$ hexo server -p 5000 插件安装问题1npm ERR! node-waf configure build 当您尝试安装以 C/C++ 或其他非 JavaScript 语言所编写的插件时，可能会遇到此类问题，请确认您已经在电脑上安装相对应的编译器。 DTrace 错误 （Mac OS X）123&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125; DTrace 安装可能有错误 , 使用下列命令:1$ npm install hexo --no-optional 参考 #1326 在 Jade 或 Swig 遍历资料Hexo 使用 Warehouse 存储资料，它不是一般数组所以必须先进行类型转型才能遍历。 12&#123;% for post in site.posts.toArray() %&#125;&#123;% endfor %&#125; 资料没有更新有时资料可能没有被更新，或是生成的文件与修改前的相同，您可以尝试清除缓存并再执行一次。1$ hexo clean 泄露（Escape）内容Hexo 使用 Nunjucks 来解析文章（旧版本使用 Swig，两者语法类似），内容若包含 `{{ }}` 或 `{% %}` 可能导致解析错误，您可以用 raw 标签包裹来避免潜在问题发生。123&#123;% raw %&#125;Hello &#123;&#123; sensitive &#125;&#125;&#123;% endraw %&#125; ENOSPC 错误 （Linux）运行 $ hexo server 命令有时会返回这样的错误：1Error: watch ENOSPC ... 它可以用过运行 $ npm dedupe 来解决，如果不起作用的话，可以尝试在 Linux 终端中运行下列命令：1$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 这将会提高你能监视的文件数量。 Process Out of Memory当hexo g时，遇到以下错误：1FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory 如下，更改hexo-cli文件的第一行，来增大nodejs堆内存.该bug已在新版本修复。1#!/usr/bin/env node --max_old_space_size=8192 Git Deployment ProblemsRPC failed12error: RPC failed; result=22, HTTP code = 403fatal: &apos;username.github.io&apos; does not appear to be a git repository 确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。Error: ENOENT: no such file or directory这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。解决办法： 检查文章的标签和类别,确保本地和github上是相同的。 合并分支（Commit）。 清除，重构。在站点目录下，命令行（即Git Bash）运行hexo clean和hexo g 手动将站点目录下的public文件夹复制到您的桌面 从你的master分支切换到部署在本地分支。 从桌面复制public文件夹到本地分支。 合并分支到github（Commit）。 切回master分支。 Server Problems1Error: listen EADDRINUSE 你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：1$ hexo server -p 5000 Plugin Installation Problems1npm ERR! node-waf configure build 这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。 Iterate Data Model on Jade or SwigHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。 12&#123;% for post in site.posts.toArray() %&#125;&#123;% endfor %&#125; No command is executed那个不能使用除help、init和version以外的命令行（即Git Bash）时, 有可能时站点目录下的package.json文件，缺少hexo ，如下:12345&#123; &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.2.2&quot; &#125;&#125; ENOSPC Error (Linux)如果运行命令$ hexo server 返回一个错误:1Error: watch ENOSPC … 可以通过运行$ npm dedupe或者以下命令行（即Git Bash）：1$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p 来增加测试时，你可以看见的文件数量。 EMPERM Error (Windows Subsystem for Linux)如果在Windows Subsystem for Linux，运行命令$ hexo server 返回这个错误:1Error: watch /path/to/hexo/theme/ EMPERM 因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。所以需要重新编译，再启动服务器：12hexo ghexo s Template render error有时运行命令$ hexo g 返回一个错误:12FATAL Something’s wrong. Maybe you can find the solution here: &lt;http://hexo.io/docs/troubleshooting.html&gt;Template render error: (unknown path) 这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件_config.yml中，比如缩进错误：错误例子：1234plugins:hexo-generator-feedhexo-generator-sitemap\ `]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客部署至云服务器]]></title>
    <url>%2Fhexovps.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月11日21:32可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 博客的Githupages发布方案已经在本地安装Hexo博客框架及发布至Github Pages讲过了，在这里就不在赘述，本文主要讲将博客部署至个人VPS中，本次教程需要一定的Linux基础，如果不是非常有必要不建议部署在VPS上，国内的VPS主机需要进行备案才能绑定域名，国外的主机访问速度受限。 主机选择本次教程使用的主机是腾讯云的1G1核主机，如果你是学生的话推荐腾讯云或者阿里云的学生机，或者使用阿里云的香港轻量应用服务器，这个是免备案的。详情请看：【良心推荐】阿里云香港1G1核轻量应用服务器24元/月 前提条件1.一台安装了 Ubuntu 14.04 的 云服务器2.在本地电脑上安装 Node.js 和 npm，这个可以看Hexo博客本地环境安装步骤此外，还要在云服务器上安装 Git 和 Nginx 两个必备的软件包。Git 用于版本管理和部署，Nginx 用于静态博客托管。 12sudo apt-get updatesudo apt-get install git nginx -y 本地 Hexo 安装及初始化NPM 上还有许多 Hexo 相关的包，但是只要安装好了 hexo-cli 和 hexo-server这两个核心组件之后，就可以让博客跑起来了。我们使用 Node.js 的包管理器 npm 安装 hexo-cli 和 hexo-server。1npm install hexo-cli hexo-server -g hexo-cli 是 Hexo 的命令行工具，可用于快速新建、发布、部署博客；hexo-server 是 Hexo 的内建服务器，可用于部署前的预览和测试。-g 选项，表示全局安装。接下来，为 Hexo 博客做一些基础配置，包括创建基础文件。这步操作很简单，Hexo 提供了一个快捷命令，只需要提供一个存放文件的目录地址即可。1hexo init ~/hexo_blog 在国内环境下执行该命令，速度会有些慢。因为需要从 Hexo 在 Github 上的仓库克隆；仓库克隆成功后，会自动执行一系列 npm 命令，自安装依赖模块。这时，我们就已经有了一个写作、管理博客的环境。详细的请看本地安装Hexo博客框架及发布至Github Pages此处不赘述。 云端服务器配置完成本地端的操作之后，暂时回到服务器的配置。在下面的操作之前，请确保已经购买了一台云服务器，并且能够以 ubuntu 用户身份正常登陆。在这部分，要完成以下件事情：1.为本地的 hexo_blog 配置一个部署静态文件的远程仓库。 许多教程均以 Github 作为中转的平台，但是会让整个流程变得更为复杂，而且会受服务器与 Github 之间网络情况的影响。假如 Github 宕机或者被封，你将无法更新博客。2.配置 Nginx 托管博客文件目录。3.配置远程仓库自动更新到博客文件目录的钩子。 创建私有 Git 仓库在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库（bare repo）。如果没有 /var/repo 目录，需要先创建；然后修改目录的所有权和用户权限，之后 ubuntu 用户都具备 /var/repo 目录下所有新生成的目录和文件的权限。123sudo mkdir /var/repo/sudo chown -R $USER:$USER /var/repo/sudo chmod -R 755 /var/repo/ 然后，执行如下命令：12cd /var/repo/git init --bare hexo_static.git 配置 Nginx 托管文件目录接下来，创建 /var/www/hexo 目录，用于 Nginx 托管。1sudo mkdir -p /var/www/hexo 和上一步类似，这里也需要修改目录的所有权和权限。12sudo chown -R $USER:$USER /var/www/hexosudo chmod -R 755 /var/www/hexo 然后，修改 Nginx 的 default 设置：1sudo vim /etc/nginx/sites-available/default 将其中的 root 指令指向 /var/www/hexo 目录。1234567...server &#123; listen 80 default_server; listen [::]:80 default_server ipv6only=on; root /var/www/hexo; # 需要修改的部分 index index.html index.htm;... 保存并退出文件。如果以后购买并备案域名之后，可以再将配置中的 default_server 修改为你的域名。最后，重启 Nginx 服务，使得改动生效。1sudo service nginx restart 做完这一步之后，你去访问服务器的 IP 时，应该还是会报错的，因为 /var/www/hexo 目录是空的。 创建 Git 钩子接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。在自动生成的 hooks 目录下创建一个新的钩子文件：1vim /var/repo/hexo_static.git/hooks/post-receive 在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。12#!/bin/bashgit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f 保存并退出文件，并让该文件变为可执行文件。1chmod +x /var/repo/hexo_static.git/hooks/post-receive 至此，服务端的配置基本结束。 配置密钥如果直接是通过账户密码SSH连接的云服务器，需要配置一下密钥让博客在推送是免输密码 本地生成密钥这个跟链接github时生成密钥是一样的。也可以用当时生成的那个id_rsa.pub公钥。生成 ssh-key，选加密算法（rsa、dsa），给秘钥命名（可选）：1$ ssh-keygen -t rsa -C &quot;name&quot; passphrase 是证书口令，以加强安全性，避免证书被恶意复制。会在 ~.ssh 下生成 id_rsa, id_rsa.pub 两个文件，分别是 私钥/公钥。 服务器配置公钥需保存到远程服务器 ~/.ssh/authorized_keys 里，私钥由客户端本地留存。要保证 .ssh 和 authorized_keys 都只有用户自己有写权限。否则验证无效。12$ chmod -R 700 ~/.ssh/$ chmod 600 ~/.ssh/authorized_keys 然后vi .ssh/authorized_keys把id_rsa.pub中的内容粘贴进去保存。 博客配置主题配置文件中deploy项目配置如下1234deploy: type: git repo: root@ip地址:/var/repo/hexo_static branch: master]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[轻量应用服务器与ECS该选哪一个]]></title>
    <url>%2Fecs.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月18日11:13可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 优点控制台轻量应用服务器 ECS 那么从控制台的对比上，ECS 是把所有的内容都告诉用户你的地域、操作系统、标签等等，但是新手看了难免一头雾水。而 轻量应用服务器 则做了减法，让控制台变得更加的直观简介，只告诉你重要的信息。站在新手视角肯定是 轻量应用服务器 更简洁更舒服，站在我的角度么，我配置好服务器基本上很少会来看一下 ECS 的控制台，但一回来肯定是需要一些信息的，那么 ECS 能告诉我越多肯定越好。 应用镜像 应用镜像像 WordPress、phpwind 其实都是基于 LAMP 镜像运行的，而 轻量应用服务器 提供的 LAMP 细节好评就是：php 是通过 php-fpm 方式运行的，而不是 mod_php，而且 MySQL 也是 5.7 版本的不是说万年 5.1 或者 5.5，能支持更多的 PHP 程序。在创建虚拟主机绑定域名商相较于一键包配合图形化控制台的确更加好用。 功能 轻量应用服务器 在功能上肯定是更讨喜的，安装应用镜像基本上能做到开箱即用，三大金刚 Apache Httpd、PHP、MySQL 都会默认安装好，而且添加域名、设置 HTTPS 等操作都是一键式的，极大得降低了 HTTPS 入门门槛，而且 HTTPS 的配置跑分是 A 哟，为了照顾新手不会使用 HSTS 所以没开，不然跑到 A+ 肯定是妥妥的。ECS 能就只有空白的系统镜像，任何环境都是需要用户自行安装的，这在一定程度上增加了用户使用的学习成本。而 ECS 更多体现的就是专业性了，虽然复杂但是十分强大的安全组、弹性IP、均衡负载等等。 基础运维 比如说 ECS 控制台操作起来也更加的方便，点击一下就能远程连接了，操作的过程中也支持命令的右键复制和粘贴，也大大降低了用户使用终端控制的学习成本，不然还要下个 Putty 或者 Xshell 啥的也是麻烦。 然后默认只支持 密钥 登录 Linux，这个也是好评，不用密码当然更安全。同样不考虑使用 Putty 或者 Xshell 等 OpenSSH 连接工具的话，ECS控制台的远程终端控制实在是难用，不过借助 DMS 产品倒是能扩展使用的灵活性。 防火墙轻量的防火墙设置同 ECS 的安全组相比很简单直观更适合新手的使用，没有一些非常复杂的设置，新手看到 udp、tcp 真的是头都大了额，如果新手看教程的话，一般只会说 “记得一定要开启443端口才能使用HTTPS” 这样的话，但是一看到 ECS 又是 TCP 又是 UDP，而且端口还要写成 443/443 的形式，直接就是一个头两个大了。 缺点无法满足企业特性轻量应用服务器有轻量两个字，意味着其无法持续进行高负载运行（即 CPU 长时间高负载占用），如果我们要利用 轻量应用服务器 来进行持续的渲染、转码、机器学习等持续高负载操作那么就不可以了，也不支持 Nvme 这样的超高性能的 SSD，这对于读写敏感的操作就不好了。 三大金刚的版本问题Apache Httpd、PHP、MySQL 是会持续更新的，而且它们也均有爆发过大规模严重漏洞的历史，不过目前还没有看到应用镜像中的三大金刚如何升级版本号的姿势。像 WordPress 这样的程序完全可以适应高版本的 PHP，使用 PHP7.0 或者 7.1 可以拥有更高的性能还可以降低负载，但是默认只有 php5.6 可以选，既然使用 php-fpm 方式驱动其实完全可以提供多版本 PHP 的选择。 总结可以说 轻量应用服务器 是专门针对云计算入门新手或者只有轻量计算需求的用户，其对标的产品只会是 ECS 的共享型，当一到要使用 ECS 的企业型来发展性能、功能了，轻量应用服务器 的优势其实也就没有了。如果你只是轻度使用云计算产品例如搭建一个博客、官网，如果你需要一个更快启动的轻量服务器，如果你需要一个纯粹的虚拟专用机，如果你并没有阿里云内网的需求，那么 轻量应用服务器 绝对是你最好的选择。 评测我们对比的是华东1地域的安装了 CentOS 7.3 系统的 1核心1G内存的 ECS 和 轻量应用服务器 产品。看了评测就可以跟深入的了解，ECS 和 轻量应用服务器 的不同只在于概念而不在于性能。 CPU 性能根据下面的对比可以发现，轻量应用服务器 的性能和 ECS 并没有差距，大家都是新一代的 Xeon CPU，同样的虚拟化技术。只不过 轻量应用服务器 不可以持续高负载占用。轻量应用服务器：123456789101112131415System Benchmarks Index Values BASELINE RESULT INDEXDhrystone 2 using register variables 116700.0 34281977.0 2937.6Double-Precision Whetstone 55.0 2962.7 538.7Execl Throughput 43.0 4860.0 1130.2File Copy 1024 bufsize 2000 maxblocks 3960.0 1054197.7 2662.1File Copy 256 bufsize 500 maxblocks 1655.0 283098.8 1710.6File Copy 4096 bufsize 8000 maxblocks 5800.0 3165160.0 5457.2Pipe Throughput 12440.0 1734490.3 1394.3Pipe-based Context Switching 4000.0 375732.0 939.3Process Creation 126.0 18345.1 1456.0Shell Scripts (1 concurrent) 42.4 6747.0 1591.3Shell Scripts (8 concurrent) 6.0 921.5 1535.8System Call Overhead 15000.0 2939229.7 1959.5 ========System Benchmarks Index Score 1649.5 ECS：123456789101112131415System Benchmarks Index Values BASELINE RESULT INDEXDhrystone 2 using register variables 116700.0 34582858.9 2963.4Double-Precision Whetstone 55.0 2984.8 542.7Execl Throughput 43.0 5118.8 1190.4File Copy 1024 bufsize 2000 maxblocks 3960.0 1073823.9 2711.7File Copy 256 bufsize 500 maxblocks 1655.0 284701.5 1720.3File Copy 4096 bufsize 8000 maxblocks 5800.0 3213933.6 5541.3Pipe Throughput 12440.0 1722785.7 1384.9Pipe-based Context Switching 4000.0 377999.7 945.0Process Creation 126.0 18704.4 1484.5Shell Scripts (1 concurrent) 42.4 6852.6 1616.2Shell Scripts (8 concurrent) 6.0 937.2 1562.0System Call Overhead 15000.0 2979190.8 1986.1 ========System Benchmarks Index Score 1673.4 磁盘性能由下面的磁盘跑分也可以看见，轻量应用服务器 的 20G SSD 系统盘 和 ECS 的 20G SSD 云盘的性能都是一致的，都是 1800 的iops，也都是 90M 左右的读写没有差距。轻量应用服务器：123456789101112131415161718192021222324252627282930313233/dev/vda: Timing cached reads: 21070 MB in 2.00 seconds = 10549.25 MB/sec Timing buffered disk reads: 270 MB in 3.01 seconds = 89.76 MB/sec [root@izbp1auqkyqtj4iozs7athz dev]# fio --bs=4k --ioengine=libaio --iodepth=1 --direct=1 --rw=read --time_based --runtime=600 --refill_buffers --norandommap --randrepeat=0 --group_reporting --name=fio-read --size=10G --filename=/dev/vdafio-read: (g=0): rw=read, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=1fio-2.2.8Starting 1 processJobs: 1 (f=1): [R(1)] [100.0% done] [7200KB/0KB/0KB /s] [1800/0/0 iops] [eta 00m:00s]fio-read: (groupid=0, jobs=1): err= 0: pid=24361: Sun Sep 10 15:04:27 2017 read : io=4206.7MB, bw=7179.3KB/s, iops=1794, runt=600004msec slat (usec): min=3, max=165, avg= 6.78, stdev= 2.02 clat (usec): min=2, max=84748, avg=548.56, stdev=2727.93 lat (usec): min=131, max=84755, avg=555.59, stdev=2727.93 clat percentiles (usec): | 1.00th=[ 141], 5.00th=[ 241], 10.00th=[ 302], 20.00th=[ 306], | 30.00th=[ 314], 40.00th=[ 322], 50.00th=[ 334], 60.00th=[ 350], | 70.00th=[ 362], 80.00th=[ 382], 90.00th=[ 442], 95.00th=[ 502], | 99.00th=[ 1012], 99.50th=[23936], 99.90th=[40704], 99.95th=[42752], | 99.99th=[68096] bw (KB /s): min= 4624, max= 7784, per=100.00%, avg=7182.85, stdev=181.15 lat (usec) : 4=0.01%, 250=6.25%, 500=88.69%, 750=3.79%, 1000=0.27% lat (msec) : 2=0.36%, 4=0.06%, 10=0.03%, 20=0.04%, 50=0.48% lat (msec) : 100=0.04% cpu : usr=0.50%, sys=1.81%, ctx=1076903, majf=1, minf=33 IO depths : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0% submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% issued : total=r=1076894/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0 latency : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs): READ: io=4206.7MB, aggrb=7179KB/s, minb=7179KB/s, maxb=7179KB/s, mint=600004msec, maxt=600004msecDisk stats (read/write): vda: ios=1078167/690, merge=0/399, ticks=598805/4230, in_queue=602927, util=98.01% ECS：12345678910111213141516171819202122232425262728293031323334/dev/vdb: Timing cached reads: 19778 MB in 2.00 seconds = 9901.01 MB/sec Timing buffered disk reads: 270 MB in 3.02 seconds = 89.54 MB/sec[root@iZbp1258gr0v9v184jdqqkZ dev]# fio --bs=4k --ioengine=libaio --iodepth=1 --direct=1 --rw=read --time_based --runtime=600 --refill_buffers --norandommap --randrepeat=0 --group_reporting --name=fio-read --size=10G --filename=/dev/vdbfio-read: (g=0): rw=read, bs=4K-4K/4K-4K/4K-4K, ioengine=libaio, iodepth=1fio-2.2.8Starting 1 processJobs: 1 (f=1): [R(1)] [100.0% done] [6940KB/0KB/0KB /s] [1735/0/0 iops] [eta 00m:00s]fio-read: (groupid=0, jobs=1): err= 0: pid=9552: Sun Sep 10 15:23:44 2017 read : io=4218.9MB, bw=7200.2KB/s, iops=1800, runt=600001msec slat (usec): min=3, max=344, avg= 6.97, stdev= 2.32 clat (usec): min=1, max=85711, avg=546.79, stdev=4741.30 lat (usec): min=145, max=85717, avg=553.99, stdev=4741.28 clat percentiles (usec): | 1.00th=[ 147], 5.00th=[ 149], 10.00th=[ 151], 20.00th=[ 153], | 30.00th=[ 155], 40.00th=[ 159], 50.00th=[ 167], 60.00th=[ 199], | 70.00th=[ 229], 80.00th=[ 241], 90.00th=[ 249], 95.00th=[ 270], | 99.00th=[ 374], 99.50th=[56576], 99.90th=[67072], 99.95th=[67072], | 99.99th=[67072] bw (KB /s): min= 6380, max= 7624, per=100.00%, avg=7202.00, stdev=111.69 lat (usec) : 2=0.01%, 50=0.01%, 250=90.56%, 500=8.76%, 750=0.06% lat (usec) : 1000=0.02% lat (msec) : 2=0.02%, 4=0.01%, 10=0.01%, 20=0.01%, 50=0.01% lat (msec) : 100=0.55% cpu : usr=0.50%, sys=1.98%, ctx=1080029, majf=0, minf=34 IO depths : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0% submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% issued : total=r=1080027/w=0/d=0, short=r=0/w=0/d=0, drop=r=0/w=0/d=0 latency : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs): READ: io=4218.9MB, aggrb=7200KB/s, minb=7200KB/s, maxb=7200KB/s, mint=600001msec, maxt=600001msecDisk stats (read/write): vdb: ios=1079640/0, merge=0/0, ticks=589523/0, in_queue=589382, util=98.27% 文章转载自https://yq.aliyun.com/articles/202688]]></content>
      <categories>
        <category>VPS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[【良心推荐】阿里云香港1G1核轻量应用服务器24元/月]]></title>
    <url>%2Ftxamd.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月11日21:35可能会因为没有更新而失效，如已失效或需要修正，请留言！阿里云轻量应用服务器 阿里云学生机9.5元/月 轻量应用服务器普通的ECS云服务器的区别，可以看一下轻量应用服务器与ECS该选哪一个?无意中发现了阿里云的轻量应用服务器，香港的比大陆的还便宜。仅仅24块钱一个月，虽买了一个月试试。 ping了一下，人在华北地区，ping香港这个延迟已经是很低了。香港服务器的优点这里就不赘述了，作为轻量应用服务器，用来翻 * bi~可以拥有比较快的速度，峰值30M的带宽，1T的流量也完全够用。用来折腾搭建个人网站的话，又可以省去备案的烦恼。 阿里云香港购买流程点击阿里云轻量应用服务器，点击立即购买 在下一个页面选择香港，当然还有新加坡服务器可选，这个也不错。如果需要搭建博客或者其他的什么环境，可以直接选择需要的应用镜像。不需要的话可以点击系统镜像选择需要的镜像即可。 后面一切都很简单了。付款完成，等待自动跳转到控制台即可。注意默认只开放了80、443、22端口，如果需要开放其他端口，可以自行在控制台的防火墙选项中设置。如果你不需要绑定域名。也不需要去看外面的世界。就是想要个云服务器折腾着玩。可以考虑阿里云学生机9.5元/月，阿里云还是比较人性化，24岁以下免认证，直接获得学生机购买资格。阿里云学生机提供两种配置，一种是普通的ECS，带宽只有1M。还有一种就是轻量应用服务器。 9.5元/月，一年不过一百多。用作平时折腾或者学习用途足够了。需要的赶紧买起来。阿里云学生机页面]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客新建文章并发布]]></title>
    <url>%2Farticle.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月11日21:35可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 创建新文章根目录命令行输入hexo new &lt;模板&gt; &lt;文章名&gt;新建文章其中&lt;模板&gt;在scaffolds中，默认情况下有三个模板post、draft、page 参数 功能 路径 post 新建文章 /source/_posts/ draft 新建草稿 /source/_drafts/ page 新建页面（标签页，分类页等） /source/ 通常情况下使用hexo new post &lt;title&gt;即可，注意这里的title不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article命令行输入hexo new post article此时在source/_posts/文件夹中多了一个article.md文件。打开可以看到如下内容： 文章内容中两条---之间的内容为文章的配置内容，可以在其中设置标签、分类等。其中的title为文章发布后文章页面显示的标题，例如我们修改一下tittle为：Hexo博客文章发布而.md文件的名字，也就是我们新建文章时输入的名字，是作为文章页面链接中显示的名字，例如，本篇文章的文件名为：article.md，文章内设置的文章标题为Hexo博客新建文章并发布，那么本篇文章的链接就是https://www.lixint.me/article.html 文章模板在新建文章中使用的post参数，就是模板的名称，在使用hexo new post &lt;文件名&gt;命令进行新建文章时，系统会自动在scaffolds文件夹中搜寻名为post的文件，根据其中的内容生成新的.md文章文件。后续随着配置项的增多，可以自行设置不同类型的模板。例如本篇文章的模板如下： 其中的title跟data会在生成文件时自动填写。利用此模板生成的文章文件，只需要进行对应项目的填写即可。例如本篇文章的配置信息如下： 给文章添加分类和模板通过对文件头部配置信息中tags 与categories项的修改可以设置文章的标签及分类。其中标签可以按格式贴现设置多个：123456title: Hexo博客新建文章并发布date: 2018-12-06 12:16:12tags: - Hexo - Markdowncategories: 搭建博客 在博文中添加图片目前有三种方法像博文中添加图片： 方法一命令行输入npm install hexo-asset-image --save安装插件在根目录/source目录下新建一个img文件夹，将需要插入的图片放到里面在文章中引用图片时图片使用格式![header](img/xxx.jpg)进行引用图片。 方法二在博客配置文件中搜索post_asset_folder项，设置为true 这样在创建文章时会自动在文章.md所在目录/source/_posts文件夹内生成一个与文章同名的文件夹。例如新建文章hexo new post example则会生成一个example.md文件与一个名为example的文件夹。把example这个博文需要展示的图片放在example文件夹目录下；文章内使用[% asset_img slug [title] %]（将方括号][替换为花括号}{）的格式进行插入图片，例如我要插入一个名为1.jpg的图片，写文章时就应该填写​ [% asset_img 1.jpg 图片1 %] 方法三前两种方法尽管在上传时很方便，但是在插入图片时并不是很方便，现在很多Markdown编辑器在插入图片是非常方便，截图直接粘贴、现有的图片文件直接拖入都可以实现插入图片，而不是使用代码进行插入。但是这样插入的图片在上传时并不会被上传，这样就导致了博客中文章图片的连接还是本地路径的格式。于是博主自己写了一个Python脚本，在文章完成后上传前，通过脚本自动将文章中的图片上传至腾讯云对象存储（腾讯云每个月都有一定的免费额度）或者SMMS图床，文章中图片链接替换。这样既不会占用Github Pages空间，又能方便地插入图片。对于脚本的使用，可以到==&gt;Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接&lt;==查看]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块命令记录]]></title>
    <url>%2Fpythoncommand.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月27日21:03可能会因为没有更新而失效，如已失效或需要修正，请留言！ 获取文件名/后缀名123456789import osfile = "Hello.py"file2 = "c:/hello.py"# 获取前缀（文件名称）assert os.path.splitext(file)[0] == "Hello"# 获取后缀（文件类型）assert os.path.splitext(file)[-1] == ".py"assert os.path.splitext(file)[-1][1:] == "py"os.path.split(file2) #['c://','hello.py'] 判断文件/目录是否存在12345import osos.path.exists("1.txt")#Trueos.path.exists("dirpath")#True 列出文件夹下所有文件12dir = &quot;c:/dir/&quot;os.listdir(dir) 文字生成PDF文件依赖 121. pdfkit库2. wkhtmltopdf软件 软件安装windowns 平台： 软件下载地址： 手动安装完成后，将该程序的bin执行路径加入到系统环境 $PATH 变量中，否则后面无法使用，添加完成重启电脑刷新。 例如E:\Program\wkhtmltox\bin\ Linux 平台： 直接使用命令安装： 12$ sudo apt-get install wkhtmltopdf # ubuntu$ sudo yum intsall wkhtmltopdf # centos 支持url/file/string的导入1234import pdffkitpdfkit.from_url('http://google.com', 'out.pdf') #从网址导入pdfkit.from_file('test.html', 'out.pdf') #从html文件导入pdfkit.from_string('Hello!', 'out.pdf') #从字符串导入 支持list12pdfkit.from_url(['google.com', 'yandex.ru', 'engadget.com'], 'out.pdf')pdfkit.from_file(['file1.html', 'file2.html'], 'out.pdf') 支持打开的文件12with open('file.html') as f: pdfkit.from_file(f, 'out.pdf') 如果没有添加环境变量1234import pdfkitpath_wkthmltopdf = r'C:\Python27\wkhtmltopdf\bin\wkhtmltopdf.exe' #将文件路径进行设置config = pdfkit.configuration(wkhtmltopdf=path_wkthmltopdf) #导入配置pdfkit.from_url("http://google.com", "out.pdf", configuration=config) #生成时引入 options自定义设置 12345678910111213141516171819options = &#123; 'page-size': 'Letter', 'margin-top': '0.75in', 'margin-right': '0.75in', 'margin-bottom': '0.75in', 'margin-left': '0.75in', 'encoding': "UTF-8", 'custom-header' : [ ('Accept-Encoding', 'gzip') ] 'cookie': [ ('cookie-name1', 'cookie-value1'), ('cookie-name2', 'cookie-value2'), ], 'no-outline': None, 'outline-depth': 10,&#125;pdfkit.from_url('http://google.com', 'out.pdf', options=options) 引用css 1234567# Single CSS filecss = 'example.css'pdfkit.from_file('file.html', options=options, css=css)# Multiple CSS filescss = ['example.css', 'example2.css']pdfkit.from_file('file.html', options=options, css=css) 支持中文字符 需要找一台有安装了中文字体的电脑复制一份字体文件(就是/usr/share/fonts下的文件)，然后操作就可以了。 需要在html的字符集设置为utf8 1&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt; CentOS安装Python3以Python 3.7.1 为例，进到Python3.7.1页面。选择Files里面的第一个。复制下载链接 12345678910111213yum update# 安装编译器yum install gcc gcc-c++ autoconf automake# 安装可能用到的库文件yum install -y zlib-devel bzip2-devel xz-libs wget openssl-devel# 下载安装包wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgztar xvf Python-3.7.1.tgzcd Python-3.7.1# 指定安装路径./configure --prefix=/usr/local# 编译并安装make &amp;&amp; make install 编译后报错ModuleNotFoundError: No module named &#39;_ctypes&#39;，是因为3.7版本需要一个新的包libffi-devel，安装此包之后再次进行编译安装即可。 12yum install libffi-devel -ymake install 原来版本为2.7.5，继续输入： 1234# 移动旧版本Python（备份）mv /usr/bin/python /usr/bin/python2.7.5# 建立软链接ln -s /usr/local/bin/python3.7 /usr/bin/python 此时在查看python的版本。可以看到: 1234Python 3.7.1 (default, Dec 24 2018, 18:48:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.import &apos;atexit&apos; # &lt;class &apos;_frozen_importlib.BuiltinImporter&apos;&gt; 注：升级python后yum会无法使用，需要编辑一下对应文件。 修改yum vi /usr/bin/yum把第一行中的#!/usr/bin/python改成#!/usr/bin/python2.7.5。至此，centos中python自2.x升级3.x完成。 安装pip 12wget https://bootstrap.pypa.io/get-pip.pysudo python get-pip.py]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text3及配置Python使用环境]]></title>
    <url>%2Fsublimetext.html</url>
    <content type="text"><![CDATA[本文最后更新于2019年01月01日13:54可能会因为没有更新而失效，如已失效或需要修正，请留言！ 安装Package Control使用Ctrl+`（tab键上面）(或View &gt; Show Console menu) 打开Sublime Text控制台，将下面的Python代码粘贴到控制台里: 代码出处1import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) 如果在Perferences-&gt;package settings中看到package control这一项，则表明安装成功。 用Package Control查看已安装的插件1.按下Ctrl+Shift+P调出命令面板。2.输入install 调出 Install Package 选项并回车。等待。在列表中选中要安装的插件，或者输入插件名(比如要安装IMESupport插件，则输入IMESupport，它会实时过滤筛选结果)，根据命令面板中的过滤结果，选择要安装的插件。安装中文插件。搜索localiza，在搜索出来的列表中选择点击安装如果安装失败的话可以到汉化项目页面下载源码，重命名文件夹为ChineseLocalization，放到C:\Users\用户名\AppData\Roaming\Sublime Text 3\Packages中。 禁用 Sublime Text 3 检测新版本设置 Preferences -&gt; Settings-User添加 &quot;update_check&quot;: false 安装主题推荐 Boxy Ctrl(Mac下Cmd)+Shift+P install package -&gt; Boxy Theme install package -&gt; A File Icon 其他插件SublimeTmpl 新建文件模板Package settings - sublime tmpl - settings User设置，123456789&#123; &quot;disable_keymap_actions&quot;: false, // &quot;all&quot;; &quot;html,css&quot; &quot;date_format&quot; : &quot;%Y-%m-%d %H:%M:%S&quot;, &quot;attr&quot;: &#123; &quot;author&quot;: &quot;lixint&quot;, &quot;email&quot;: &quot;lixint8@gmail.com&quot;, &quot;link&quot;: &quot;https://github.com/lixint/&quot; &#125; &#125; Package settings - sublime tmpl - key bindings-user设置123456[ &#123; &quot;caption&quot;: &quot;Tmpl: Create python&quot;, &quot;command&quot;: &quot;sublime_tmpl&quot;, &quot;keys&quot;: [&quot;ctrl+alt+p&quot;], &quot;args&quot;: &#123;&quot;type&quot;: &quot;python&quot;&#125; &#125;, ] 这样用快捷键ctrl+alt+p可以快捷新建py文件并自动填写文件头 侧边栏字体大小修改插件PackageResourceViewer修改方法：插件安装完后Ctrl+alt+P打开搜索栏，搜索PackageResourceViewer名称，选择open resource 在跳出的搜索框搜索主题名 然后再搜索主题名下的主题文件的名称打开，出现主题配置文件，搜索修改需要的参数即可。 安装Anaconda1.相关配置均需在”Preferences”-“Package settings”-“Anaconda”中选择1.1“Settings-Default”中，手动设置python解释器的路径，然后保存。设置python_interpreter为python解释器路径 Settings-User 设置：12345678910&#123; &quot;python_interpreter&quot;:&quot;E:/Program/Anaconda3/python.exe&quot;, &quot;suppress_word_completions&quot;: true, &quot;suppress_explicit_completions&quot;: true, &quot;complete_parameters&quot;: true, &quot;swallow_startup_errors&quot;: true, &quot;anaconda_linting&quot;:false, &quot;complete_parameters&quot;: false, #补全必要参数 &quot;complete_all_parameters&quot;: false #补全全部参数&#125; ubuntu下输入命令whereis python查询Python的安装路径Anaconda-setting-default下设置python_interpreter项为Anaconda中Python的路径，例如：1&quot;python_interpreter&quot;: &quot;/home/ubuntu/anaconda3/bin/python3.7&quot;, 工具-编译系统选择anaconda Ubuntu下安装后没有Anaconda编译选项工具-编译系统-新建编译系统,输入如下代码:123456&#123; &quot;env&quot;: &#123;&quot;PYTHONIOENCODING&quot;: &quot;utf8&quot;&#125;, &quot;cmd&quot;: [&quot;/home/ubuntu/anaconda3/bin/python3.7&quot;, &quot;-u&quot;, &quot;$file&quot;], &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;, &quot;selector&quot;: &quot;source.python&quot;&#125; 其中的/home/ubuntu/anaconda3/bin/python3.7是Anaconda中Python的路径。 安装sublimeREPL实现sublime内交互式命令行（使用anaconda环境）正常安装步骤，安装完成后，首选项-浏览插件目录\SublimeREPL\config 新建文件夹，Python37(根据anaconda的python环境版本确定)，将Python文件夹中的文件全部复制到Python37文件夹。打开Main.sublime-menu文件，替换所有的Python为Python37（改个名字）除了各部分的1"syntax": "Packages/Python/Python.tmLanguage", 中的Python不替换。打开Main.sublime-menu文件，将所有“cmd”：后的路径改为anaconda的python环境路径(注意路径中的斜杠)1"cmd": ["D:/anaconda/envs/py3k/python.exe", "-i", "-u"], 打开Default.sublime-commands文件，替换所有Python为Python37快捷键添加如下代码，同理可以添加ipython运行。1234567891011121314//anaconda环境下运行sublimeREPL_pdb&#123;&quot;keys&quot;:[&quot;f6&quot;], &quot;caption&quot;: &quot;SublimeREPL: Python37 - PDB current file&quot;, &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;: &#123;&quot;id&quot;: &quot;repl_Python37_pdb&quot;, &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;&#125;,//anaconda环境下运行sublimeREPL_run&#123;&quot;keys&quot;:[&quot;f5&quot;], &quot;caption&quot;: &quot;SublimeREPL: Python37 - RUN current file&quot;, &quot;command&quot;: &quot;run_existing_window_command&quot;, &quot;args&quot;: &#123;&quot;id&quot;: &quot;repl_Python37_run&quot;, &quot;file&quot;: &quot;config/Python37/Main.sublime-menu&quot;&#125;&#125;, pdb常用命令 快捷键设置1234567/*光标右侧为括号一类的字符时，回车键移动光标（回车的话用shift enter）*/ &#123;"keys": ["enter"], "command": "move", "args": &#123;"by": "characters", "forward": true&#125;, "context": [ &#123; "key": "following_text", "operator": "regex_contains", "operand": "^[)\\]\\&gt;\\'\\\"\\ %&gt;\\&#125;\\;\\,]", "match_all": true &#125;, &#123; "key": "preceding_text", "operator": "not_regex_match", "operand": "^.*\\&#123;$", "match_all": true &#125; ] &#125;, 字体设置设置-特定语法（setting-User）写入1234&#123; &quot;font_face&quot;: &quot;YaHei Consolas Hybrid&quot;, &quot;font_size&quot;: 13,&#125;]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Sublime Text</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博文图片自动上传腾讯云、SMMS图床并替换博文内图片链接]]></title>
    <url>%2Fmarkdownpic.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月22日21:04可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 起因 刚开始折腾Hexo博客的时候，各种修改各种查，发现网上许多教程已经过时了，于是乎决定把自己搭建博客的过程整理成文章。在用Typora写文章的时候发现，文章里插入的图片是个问题，尤其是在用截图的时候，习惯上都是截图直接粘贴进去。但是文章在发布的时候图片的地址还是用的本地路径，导致了图片显示有问题。 网上查了一下，大都是几种解决方法：插入后修改为相对路径，把图片放到source文件夹里；安装插件，渲染文章的时候自动替换图片链接。这两种都需要把图片放到Github Pages空间里，长此以往占用的内存会越来越大；还有就是使用在线的Markdown编辑器，可以实时把图片上传，这种还不错，但没试过截图插入行不行；再者就是提前把图片上传到图床，插入时就用图床的链接。感觉这几种解决方法都不是很完美，于是用我粗糙的Python技能写了一个脚本，用来在发布文章之前自动把文章中的图片上传到腾讯云存储对象或者SMMS图床，并且把返回来的链接替换掉原来的链接。 关于脚本项目Github链接工作流程很简单，在运行脚本后脚本会用正则表达式匹配!开头)的链接（所以用Html语法插入的图片不管用），然后提取出里面的本地图片地址，根据运行脚本时候的选择上传到腾讯云存储对象或者SMMS图床。然后根据反馈回来的图片链接再进行替换。 使用方法下载uploadparser.py`、`imgupload`、`UploadImg.ini放置在本地博客根目录。如果使用腾讯云cos的话先填好secret_id、secret_key、region、Bucket 腾讯云cos配置需要的各种key的获取方式参看==&gt;腾讯云对象存储官方文档博客根目录命令行格式python imgupload tx/smms/clearline &lt;filename.md&gt;例如：python imgupload tx example.md 上传至腾讯云。 相关依赖脚本使用Python 3编写第三方依赖：12requestscos-python-sdk-v5 使用腾讯云上传需要，github地址https://github.com/tencentyun/cos-python-sdk-v5 注意事项1.命令： smms、tx、clearline2.文件名需输入后缀.md，非Markdown语法暂不支持。3.上传腾讯对象存储需要自己填写secret_id、secret_key、region、Bucket，上传腾讯云对象存储默认建立一个以文件名命名的文件夹存放图片。 存在问题1.错误处理不明朗，出错时只能慢慢查。2.遇到文章中带js脚本代码的，容易误处理。其他的非图片链接的!开头)结尾的字符串都会误处理。（现已修正） 使用示例]]></content>
      <categories>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Python</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客主题安装及Next主题个性化修改]]></title>
    <url>%2Fhexo-theme-diy.html</url>
    <content type="text"><![CDATA[本文最后更新于2019年01月13日12:32可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 写在最前面：1.在修改时请注意博客配置文件与主题配置文件的区别：博客配置文件是指博客根目录下的_config.yml文件，主题配置文件是指/themes/主题名/路径下的_config.yml文件，例如我使用的主题为next主题，主题配置文件为/themes/next/_config.yml。2.文内所有命令行命令全部是在博客根目录打开命令行下输入的。根目录下目录结构为：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 默认情况下，命令行输入命令ls显示如下： 目录 设置作者头像 设置作者昵称与站点描述 设置代码高亮主题 侧边栏社交链接 开启打赏功能 修改打赏字体不闪动 开启友情链接or侧边栏推荐阅读 设置RSS 设置网站图标 实现全站及文章字数统计及阅读时长 添加顶部加载条 自定义鼠标样式 实现点击出现桃心 修改网页底部的小图标 去掉页面底部的强力驱动信息及设置备案信息 添加动态背景 增加波浪背景动画 在右上角实现fork me on github按钮 增加回到顶部按钮及显示当前浏览进度 修改顶部菜单与下方信息栏的间隙大小 网站标题栏背景颜色 为博客加上萌萌的 添加DaoVoice实现在线联系 主页文章添加阴影效果 增加本地搜索功能 修改语言 修改菜单及创建分类页 修改主题风格 主题选择可以到Nexo官方主题页选择自己喜欢的主题，每个主题的使用方法略有不同，所以如果你是跟我一样的小白，建议使用流行热门的主题，这样出现问题网上基本都可以搜到解决方法。推荐Next主题，我的博客使用的就是Next的主题 Next主题修改 主题安装Next主题文档页面目前Next主题的项目分成了两个项目，一个是5.1.4版本以下的，一个是一直更新的，现在已经更新到了6.5，建议直接用最新的，最新版本的主题已经把很多常用的功能集成了，用起来很方便。本篇文章是基于Next 6.5进行的修改与展示。Next主题项目页面(v5.1.4)v6.5版本页面方法1：项目页面点击releases，找到最新版本的主题zip包并下载，解压放到博客根目录/themes重命名文件夹为next，两版本通用。 方法2：博客根目录打开命令行，用5.1版本输入命令1git clone https://github.com/iissnan/hexo-theme-next themes/next 6.5版本输入命令：1git clone https://github.com/theme-next/hexo-theme-next themes/next 安装完成后，打开博客配置文件修改最上方的theme项为next。 主题配置文件是根目录/themes/next目录下的_config.yml文件。修改完成后命令行输入hexo s本地运行一下看是否生效。 主题修改 修改语言修改博客配置文件下的language项为zh-CN 这里要注意一下，看一下主题文件夹内的languange文件夹中中文的配置文件叫什么名字，Next主题有些版本的叫zh-Hans那这里就填zh-Hans，Next最新版本中用的是zh-CN，故这里填写zh-CN 修改菜单及创建分类页修改主题配置文件下的menu项，按需要打开菜单。例如我需要把标签页面打开，就把tags项前面的#去掉就行了。 Hexo s运行一下可以看到菜单多了一个标签项。但是此时还不行，只是有了入口。点击标签菜单，会显示： 因为只有了入口，但还没有标签页面，需要在命令行输入如下命令：hexo new page tags新建出标签页。 同样的道理，开启分类页的时候要输入hexo new page categories来新建出分类页。 修改主题风格Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。 设置作者头像编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。方法1：在线图片设置：现在有一张网络图片， 使用百度上随便搜的。 方法2：本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg 这个rounded项可以设置头像为圆形，设置为ture后会自动根据头像的尺寸将头像变化为圆形或者椭圆，头像图片为正方形的话则为圆形。长方形的话长宽相差越大，椭圆越明显。设置opacity的值控制头像的透明度，值为0 - 1。rotated项为头像旋转，设置为true，则鼠标指到头像时头像会旋转。 设置作者昵称与站点描述这个比较简单。设置博客配置文件中的author为昵称，description为描述。同理，subtitle为副标题，keywords为关键词，timezone为时区，可以按需求填写。 设置代码高亮主题NexT 使用 Tomorrow Theme作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties更改 主题配置文件中的highlight_theme 字段，将其值设定成你所喜爱的高亮主题即可。 侧边栏社交链接侧栏社交链接的修改包含两个部分， 配置在 主题配置文件 中。social字段为连接，格式为显示文本: 链接地址 || Font Awesome图标名称例如： 图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。例如: 百度: https://baidu.com || firefoxFont Awesome图标可以到Font Awesome查看 开启打赏功能主题自带支付宝跟微信及比特币打赏功能，只需要主题配置文件 中填入 微信和 支付宝 收款二维码图片地址即可开启该功能。搜索reward字段，将wechatpay及alipay字段前面的#去掉即可。在source文件夹中放置支付宝跟微信收款码并修改文件名字即可。reward_comment自带为打赏按钮上方的文字，不需要的话可以在前面加#注释掉。 修改打赏字体不闪动鼠标一指就疯狂抖动。 修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。 这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。我也不太懂。在这就不展开讲了。有兴趣的可以网上搜css的语法自己尝试改。 开启友情链接 or 侧边栏推荐阅读主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。links_title为标题，如果是作为友情链接使用，可以设置为links_title: 友情链接在links字段设置友情链接名字及链接123links: 友链1: http://example.com/ 友链2: http://example.com/ 例如：123links: 谷歌: https://google.com/ 百度: http://baidu.com/ links_layout为各个友情链接的布局，默认是block，也可以用#注释掉这一行用下一行的inline布局。 这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。 设置 RSSNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改主题配置文件，设定 rss 字段的值：false：禁用 RSS，不在页面上显示 RSS 连接。留空：默认就是留空的，使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。安装方法：根目录下命令行输入npm install hexo-generator-feed --save 具体的链接地址：适用于已经烧制过Feed的情形。建议直接使用插件，比较省事。 设置网站图标在EasyIcon中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico，然后把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。在主题配置文件内搜索favicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico 实现全站及文章字数统计及阅读时长根目录命令运行1npm install hexo-symbols-count-time --save 博客配置文件底部添加如下内容，保存。12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 重新hexo s看一下，文章页面已经有字数跟阅读时长的统计了。网站底部也显示了网站总字数跟总阅读时长。 添加顶部加载条 最新版本的Next主题是内置了加载条功能的。根目录打开命令行，输入如下命令：1git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace 然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。 自定义鼠标样式打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码1234567// 鼠标样式 * &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword2.ico"),auto!important &#125; :active &#123; cursor: url("http://om8u46rmb.bkt.clouddn.com/sword1.ico"),auto!important &#125; 在EasyIcon中找一张16 * 16的ico图，放在/source/images/中，修改上述代码中的链接为/images/xxx.ico，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。 实现点击出现桃心 以及 爆炸效果 1.在/themes/next/source/js/src下新建文件love.js并填入如下代码： 文件下载链接： 点击下载-love.js 点击下载-fireworks.js 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 建一个叫fireworks.js的文件并写入如下代码：1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 然后打开themes/next/layout/_layout.swig,在&lt;/body&gt;上面写下如下代码：12345678&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 最后在主题配置文件最下方加入如下代码：123# Fireworks and lovefireworks: truelove: false fireworks是爆炸效果，love是心形效果。两个不能同时开。 修改网页底部的小图标 主题配置文件搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。 animated自动为闪动开关，设置为true后图标会闪动。以及可以设置图标颜色，color处填入16进制颜色代码即可。注意保留原来的双引号。 去掉页面底部的强力驱动信息及设置备案信息主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容。 同样的theme下的enable设置为false的话可以去掉页面底部的主题信息。 enable设置为true，version设置为false的话，则不显示版本号。 如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。 添加动态背景 根目录打开命令行，输入：1git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest 主题配置文件搜索canvas-nest字段，enable项设置为true。 其他配置项说明： color ：线条颜色, 默认: &#39;0,0,0&#39;；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 onmobile：是否在手机端显示。 增加波浪背景动画 根目录打开命令行，输入1git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three 主题配置文件搜索three_waves字段，设置为true three_waves、canvas_lines、canvas_sphere三个的效果各不相同，可以自己尝试一下选一个喜欢的。 在右上角实现fork me on github按钮最新的Next主题已经内置了增加右上角的Fork me on github按钮功能，只需要在主题配置文件搜索github_banner字段，去掉前面的#，把||前面的github链接替换成自己的即可。 ||后的参数为按钮的title，为鼠标指在按钮上时显示的文本。 增加回到顶部按钮及显示当前浏览进度主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。 将下方的scrollpercent字段设置为true即可实现当前浏览进度的显示。 修改顶部菜单与下方信息栏的间隙大小 主题配置文件搜索offset字段，将offset的像素数大小设置为需要的值，默认为12。 网站标题栏背景颜色打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码：1234// 网站标题栏背景颜色.site-meta &#123; background: #FF0033; //修改为自己喜欢的颜色&#125; 颜色的值可以自行网上搜索16进制颜色进行修改。 为博客加上萌萌的 首先安装插件，根目录命令行输入npm install --save hexo-helper-live2d主题配置文件或者博客配置文件最下方添加如下代码： 注意：实测了一下在主题配置文件下用比较好使，但是官方文档中说明在博客配置文件中也可以，可能我配置有问题。 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-&lt;模型名&gt; display: position: right width: 150 height: 300 mobile: show: true 修改模型参考live2d-widget-models目前可用的模型如下： 12345678910111213141516171819202122live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 例如，我现在想修改模型为live2d-widget-model-z16 第一步，安装模型 命令行输入npm install --save live2d-widget-model-z16等待安装完成。 第二步，修改配置 在先前加入的配置内容中修改model下的use项目： 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-z16 #改动处。 display: position: right #位置，默认右侧 width: 150 #宽度 height: 300 #高度 mobile: show: true #是否在移动端显示 保存，命令行输入hexo clean &amp;&amp; hexo s看一下，此时首页显示的模型已经变了。 注意，修改后需要先hexo clean一下清除静态文件，不然可能会出现修改后不生效的情况。 还可以修改几个自定义参数来修改模型显示的大小位置。 更多设置可以查看官方文档 添加DaoVoice 实现在线联系 本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。首先到DaoVoice注册一个Daovioce账号。注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的应用设置-- 安装到网站。在下方的代码中会看到app_id: &quot;xxxx&quot;字样。 打开 themes/next/layout/_partials/head/head.swig 文件中最下方加入如下代码：123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 _config.yml，添加如下代码：123# DaoVoice daovoice: truedaovoice_app_id: 这里输入前面获取的app_id 回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。 最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。 主页文章添加阴影效果打开\themes\next\source\css\_custom\custom.styl,加入如下代码：12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 可以自行修改代码来修改阴影效果。 增加本地搜索功能首先安装插件，根目录命令行输入1npm install hexo-generator-searchdb --save 编辑博客配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000 主题配置文件搜索local_search字段，设置enable为true123# Local searchlocal_search: enable: true 配置完成后保存，hexo g、hexo s查看。 未完待续]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地安装Hexo博客框架及发布至Github Pages]]></title>
    <url>%2Fhexo-githubpages.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月08日22:04可能会因为没有更新而失效，如已失效或需要修正，请留言！欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 前面的文章中我们进行了1. Github注册以及Github Pages创建2. Hexo博客本地环境安装下一步，我们就要进行本地Hexo博客框架的搭建，完成一个能够在本地访问的博客页面。 Hexo简介Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持Github Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统。 Hexo安装本步骤需要Git与Node.js的支持，如果没有安装的话请参照Hexo博客本地环境安装进行安装。 初始化电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。空白处右键点击Git Bash here在出现的命令行窗口中输入npm install -g hexo-cli，等待运行完成依次输入以下命令 123hexo init &lt;新建文件夹的名称&gt;cd &lt;新建文件夹的名称&gt;npm install 等待运行完成，此时文件夹中多了许多文件。注意：后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。此时Hexo框架的本地搭建已经完成了。我们来运行一下看看：命令行依次输入以下命令12hexo ghexo s 浏览器中打开http://locakhost:4000或者127.0.0.1:4000可以看到一个网页，说明Hexo博客已经成功在本地运行。 本地博客发布到Github Pages第一步，需要在Github上创建好Github Pages仓库。Github注册以及Github Pages创建第二步，安装发布插件。在站点目录中运行命令行输入npm install hexo-deployer-git --save后续博客的修改等等各种功能 都需要安装各种插件。这个对博客的帮助是非常大的。等待插件安装完成。第三步，将本地目录与Github关联起来。命令行输入ssh-keygen -t rsa -C &quot;邮箱地址&quot;，这里要输入之前注册Github时的邮箱，例如我之前注册用的是 example@163.com，那命令行就输入ssh-keygen -t rsa -C &quot;example@163.com&quot;输入后一直回车。打开C:\Users\用户名，文件夹内寻找.ssh文件夹文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Notepad++，复制里面的的内容。打开Github 点击右上角的头像 Settings 选择SSH and GPG keys点击New SSH key 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击add 完成添加。此时回到命令行。 试一下是否跟Github连接成功。命令行输入ssh -T git@github.com ，弹出的内容输入yes，看到出现Hi &lt;account name&gt;! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个&lt;account name&gt;应该是你Github的用户名。第四步 修改Hexo站点的配置文件。进入博客文件夹，找到_config.yml文件。 这个是博客配置文件，后面的修改会多次用到它。用Notepad++打开。修改一下title跟url等，url修改为https://&lt;用户名&gt;.github.io，例如我的用户名是example的话，就应该输入https://example.github.io拉到文件最底部，在deploy下面添加一个repo项 一个branch项。填入如下代码： 123type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.gitbranch: master 图中也是以用户名为example为例。填写完成后保存即可。第五步 生成页面上传至Github命令行输入hexo g，此时Hexo会根据配置文件渲染出一套静态页面。完成后输入hexo d，此时会将之前渲染出的一系列文件上传至Github。Tips： 也可以直接输入hexo g -d直接完成渲染和上传。上传完成后，打开https://&lt;用户名&gt;.github.io查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Github</tag>
        <tag>Git</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客本地环境安装步骤]]></title>
    <url>%2Fhexo-git.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日16:57可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 本篇文章主要进行了Hexo博客搭建本地环境的配置及将博客发布至Github Pages。成功将Hexo博客在本地及GIthub Pages运行。 本地环境安装安装Node.js打开Node.js下载页选择Windows安装包，根据系统选择32位或者64位进行下载。 下载完成后打开进行安装。步骤1：勾选I accept，Next 步骤2：设置安装路径，默认即可 步骤3：选择需要安装的包，默认即可 步骤4：默认即可 步骤5：Next 步骤6：点击Finish完成安装。 步骤7：检查一下Node.js版本开始 - 运行 - 输入cmd ，输入node --version，可以看到Node.js的版本。 安装GitGit安装跟Node.js一样简单，打开Git下载页，点击右侧的下载按钮。 下载完成后，打开安装，这个步骤比较多，一路Next即可，无需过多配置。 点击Finish完成安装。此时在桌面空白处点击右键，你就会发现右键菜单多了两个命令 Git GUI here和Git bash here 至此，Node.js和Git全部安装完成。后面我们要进行Hexo博客框架的安装以及将博客发布到Github Pages。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【持续更新】Github Pages + Hexo 博客搭建，Next主题个性化修改]]></title>
    <url>%2Fhexo-blog.html</url>
    <content type="text"><![CDATA[本文最后更新于2020年03月08日20:49可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 点击观看操作视频 站内博客搭建文章汇总1.Github注册以及Github Pages2.Hexo博客本地环境安装步骤3.本地安装Hexo博客框架及发布至Github Pages4.Hexo博客主题安装及Next主题个性化修改5.新建文章并发布6.Hexo博客常见错误分析7.Hexo博客部署至云服务器8.Next主题修改第二弹9.Markdown基本语法教程10.Hexo博客部署至云服务器11.Hexo博客常见错误分析12.Next主题自带部分标签使用教程 操作上有问题可以到bilibili看我录制的视频===&gt;点击查看操作视频演示&lt;=== 从零开始搭建博客步骤第一步 申请Github以及创建Github Pages参照文章==&gt;Github注册以及Github Pages 第二步 本地环境安装参照文章==&gt;Hexo博客本地环境安装步骤 第三步 本地安装进行博客搭建并上传只Gihub Pages参照文章==&gt; 本地安装Hexo博客框架及发布至Github Pages 至此，一个博客就已经搭建好了，后续要进行的时候对博客进行修改，让博客更加美观易用以及博文发布等操作。 第四步 进阶教程，博客主题应用及个性化修改目前已经汇总了超过30项修改方法。 参照文章1==&gt;Hexo博客主题安装及Next主题个性化修改 参照文章2==&gt;Next主题修改第二弹 第五步 开始发布新文章参照文章==&gt;新建文章并发布 文章编写==&gt;Markdown基本语法教程 Next文章发布中的一些有用的小功能==&gt;Next主题自带部分标签使用教程 第六步 Github速度慢？部署到云服务器试试Github在国内访问速度有时候会比较慢，Coding又时不时挂掉。这时将博客部署到一个云服务器上就会是一个很好的选择。 参照文章==&gt; Hexo博客部署至云服务器 遇到问题？目前Hexo搭建博客已经非常成熟了，应用也极其广泛，常见的错误都可以通过百度/Google搜索解决。 这里汇总了部分常见的错误类型以供查看==&gt;Hexo博客常见错误分析 后续内容正在整理中。 操作视频目录中标注了每项内容的开始时间，进入视频页面调至需要的时间观看即可。 Hexo博客本地环境搭建及发布至Github Pages修改合集1修改合集2《Hexo博客本地环境搭建及发布至Github Pages》===&gt;点击播放&lt;=== 安装node.js 与git ==&gt; 3:45 初始化Hexo框架及博客本地搭建 ==&gt;19:08 将本地博客发布至Github Pages==&gt; 37:32 《修改合集1》===&gt;点击播放&lt;=== Next主题安装==&gt;4:23 修改语言==&gt;12:17 增加菜单及页面==&gt;14:20 修改主题风格 ==&gt;19:27 修改作者头像 ==&gt;22:12d 修改作者昵称与站点描述 ==&gt;33:06 设置代码高亮 ==&gt;35:24 侧边栏社交链接 ==&gt;36:47 开启打赏功能 ==&gt;45:03 设置友情链接或推荐阅读==&gt; 52:06 设置RSS ==&gt;59:19 《修改合集3》===&gt;点击播放&lt;=== 设置网站图标 ==&gt;00:00 设置文章字数统计与阅读时长 ==&gt;9:45 添加顶部加载条 ==&gt;14:02 修改鼠标样式 ==&gt;19:09 实现点击桃心与爆炸效果==&gt; 27:47 修改网页底部小图标 ==&gt;36:07 去掉底部强力驱动及设置备案信息 ==&gt;42:19 设置动态背景 ==&gt;46:53 右上角实现fork me on github ==&gt;52:48]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github注册以及Github Pages创建]]></title>
    <url>%2Fgithubpage.html</url>
    <content type="text"><![CDATA[本文最后更新于2018年12月16日16:53可能会因为没有更新而失效，如已失效或需要修正，请留言！ 欢迎加入博客搭建交流群（QQ群号60429576）==&gt;点击加入&lt;== 准备工作注册Github，建立Gihub Pages仓库打开Github首页，点击右上角的Sign up或者直接在2处填写信息后点击Sign up for Github进行注册。 Verify account处点击两侧的箭头让图上的动物变成正的，验证完成后点击下方的Creat an account进到下一步。 选择Free方案，下方的两个选项可选可不选，点击Continue继续 然后选择Skip this step完成Github的注册。此时Github会给你注册时填写的邮箱发送一封验证邮件，完成邮箱验证后才可以创建仓库。 完成验证后，依次点击1，2处，在新页面点击NEW按钮。或者直接点击3处进行仓库创建。 填入必要的信息，这里的仓库名必须要填&lt;用户名&gt;.github.io例如，图示我注册的账户名为creataccount2，仓库名就需要填写creataccount2.github.io。填写必要的描述，也可不填。勾选Initialize this repository with a README点击Creat repository进行创建。 依次点击1，2新建一个文件。 文件名为index.html，内容随意。点击Commit new file进行创建。打开&lt;用户名&gt;.github.io 一个简单的网页，内容就是刚才我们输入的内容。至此，Github Pages已经创建完成了。后续我们将利用Hexo博客框架对Github Pages的内容进行进一步的丰富。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F404.html</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fgoogleecef394f45889c22.html</url>
    <content type="text"><![CDATA[google-site-verification: googleecef394f45889c22.html]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_Q2ZPkCuVOA.html</url>
    <content type="text"><![CDATA[Q2ZPkCuVOA]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fbaidu_verify_5WZxvcM7FB.html</url>
    <content type="text"><![CDATA[5WZxvcM7FB]]></content>
  </entry>
  <entry>
    <title><![CDATA[分类]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[标签]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[new!]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Fenglish%2Fec%2F1_con.html</url>
    <content type="text"><![CDATA[Complete Transcript Complete Transcript You’re listening to ESL Podcast’s English Café number 1. This is English as a Second Language Podcast’s English Café number 1. I'm your host, Dr. Jeff McQuillan, coming to you from the Center for Educational Development in beautiful Los Angeles, California. This is our first English Café episode. The format of these episodes – the way we are going to do these episodes – is a little different. We’re not going to have a script or a story or a single dialogue to discuss, but instead, it's going to be more informal. We are going to talk about American culture. We're going to talk about American history. We’re going to talk about movies and books and music – all sorts of things that are related to the United States. We’re also going to be doing some different things. We are going to be answering your questions. We invite you to email your questions to us, and then we will answer them, at least some of them, here on the English Café. On this Café, we’re going to talk about generations in the United States – how we describe people born during different time periods, especially in the last 100 years or so. We’re also going to talk about the idea of a “blockbuster,” especially a blockbuster movie – what that is and what it involves. And, as always, we’ll answer some of your questions. Let's get started. Our first topic is going to be the names that we give different generations in the United States. I saw an article in the Voice of America news channel a few years ago. The Voice of America, you may know, is a U.S. government-sponsored or U.S. government-supported news service. They have news broadcasts. They actually have a very good section for people learning English. You might want to go to the Voice of America website and take a look at that. The title of this story I saw on the Voice of America website had the headline – which is what we call the title of an article, a “headline” – “Aircraft Manufacturer Changing Design to Accommodate Aging Passengers.” This headline is actually a good introduction to our topic of names given to generations. First, let's explain the headline briefly. The headline was “Aircraft Manufacturer Changing Design to Accommodate Aging Passengers.” “Aircraft” (aircraft) is what people fly in – airplanes, in other words. A “manufacturer” (manufacturer) is someone who makes or manufacturers something. So, an aircraft manufacturer would be a company that makes airplanes. This story is about how these aircraft manufacturers are changing the designs of the airplanes to accommodate aging passengers. “Aging” (aging) means getting older. “To accommodate” here means to make room for or to provide enough space for someone. We also use this word “accommodate” when we are talking about changing our plans so that someone can participate in something, especially if the person has some sort of problem. We try to accommodate them. We try to find a way of solving the problem for them so they can participate in whatever it is that we are doing. Here, “accommodate” refers to providing enough physical space for aging passengers. A “passenger” is a person who is riding in some sort of transportation, some form of transportation such as a bus or a train or an airplane. The headline, then, says that these aircraft manufacturers are changing their planes in order to provide room and special services for aging passengers – for passengers who are getting older. Now we come back to our main topic, which is generations, and you'll see how this story fits into our larger topic. The American population on average has been getting older in the last few years. There are more old people than there used to be. The generation that is currently aging is what is called the “baby boomer” generation. The baby boomer generation was born between the years 1946 and 1964 – basically, those born after World War II up through the 1960s. We call that group of people the “baby boomer” generation. Why “baby boomer”? Well, the term “boomer” (boomer) comes from a verb, “to boom.” “To boom” means to increase suddenly, to increase rapidly. What happened after World War II, when the American economy finally recovered from the economic problems before the war, was that people started having more babies. This resulted in, or this had the consequence of, increasing the population of the United States relatively quickly. We call everyone born in that duration, in that time, “baby boomers.” The Census Bureau – the department of the United States government that counts how many people are living in the United States – said that beginning in 2006, about 8,000 people a day would turn 60. In other words, this generation is getting older, this baby boomer generation. And this, of course, has consequences for a lot of different things, including the design of airplanes. If we call people born between 1946 and 1964 – people like me – “baby boomers,” what do we call people born after 1964? The names that we give generations are sometimes invented a few years after those people have been born. That's what happened for the generation after the baby boomer generation. People born between 1965 and the early 1980s – say, 1982 or 1983 – are usually called “Generation X” – the letter X. It's sort of a strange name. It actually comes from a popular novel that was published in 1991, called Generation X. The novel itself is about three teenagers living here in California. For whatever reason, that term “Generation X” was applied to those who were born between 1964 and, say, the early 1980s. Those born after 1983 are often called “Generation Y.” Again, that's not a very original name, probably because Y comes after X in the alphabet. More recently, I think people have been calling those born after the early 1980s the “Millennial generation.” “Millennial” comes from the word “millennium” – referring, of course, to the new millennium in which we are now living. I'm not sure when we're going to change to a new name for the people born, say, now and on into the future. That’s something impossible to predict. Just in case you're interested, there are also names for the generations before 1946. Those born between, say, 1901 and the mid-1920s are sometimes called the “greatest generation.” They're called the “greatest generation” based on a book that was written not too long ago by a journalist in the United States. The “greatest generation” was the generation, including my father's generation, who fought in World War II. Because of their sacrifice – because of what they did for the United States – they are sometimes called the “greatest generation.” Those born between 1920 and the end of World War II, who were for the most part too young to participate in World War II, are sometimes called the “silent generation.” These are people who grew up during the Great Depression – the great economic problems that the United States and other countries experienced during the 1930s. They sometimes call his generation the “lucky few.” “Lucky” because they were too young to be sent off to war in World War II. These generational terms apply to those people who were born in the United States. It's not a term that is used worldwide or even in all English-speaking countries. These terms refer to people born in the U.S. in the last hundred years or so. Our next topic is going to be “blockbuster movies.” The word “blockbuster” (blockbuster) refers to a movie, typically, that is very popular, a movie for which a lot of tickets are sold – basically, a movie that makes a lot of money. We sometimes use this term “blockbuster” to describe other artistic creations. We might describe a novel as being a “blockbuster,” but usually the term is used to describe a movie that has been very successful. Now, there are a lot of movies that have made a lot of money in the United States and around the world. It's hard to give a list of the movies that have made the most money because that list keeps changing every year. One blockbuster movie that was popular a few years ago was called King Kong. I don't want to talk too much about the specifics of the movie, although it is a very interesting American movie. I'm more interested in talking about how the movie was described, because it helps us understand a little bit about the elements that make up a blockbuster movie – the parts that are often found in very successful movies. I'll actually read a sentence that was used to describe King Kong when it was released in 2005. The movie company described the movie as being “about a crew of explorers and filmmakers set out to investigate the myths of the legendary creature, King Kong.” The sentence begins by talking about a “crew (crew) of explorers.” The word “crew” is used here to describe a small group, usually a group of people who are working together. Nowadays, we often use “crew” to describe people who work on some sort of form of transportation, such as an airplane or a ship. We might talk about the “airplane crew,” being the people who are employees of the airline who fly the plane and who take care of the people inside the plane. Here, it just refers to a small group of people who are trying to do something together, trying to work together. This is a “crew of explorers and filmmakers.” The word “explorer” (explorer) refers to someone who goes out and has adventures, but more importantly, goes out to try and discover something about a new place, a new area, somewhere where no one has gone before. We can talk about the explorers from Europe who went out in their ships during the fifteenth and sixteenth centuries, going to new worlds like North and South America and Africa and Asia. Many blockbuster movies – successful blockbuster movies – have this idea of explorers. If you think of Star Wars, for example, or the Star Trek movies, these are about explorers going out to some new, exciting places. The movie King Kong – the 2005 version of King Kong – was about “a crew of explorers and filmmakers.” “Filmmakers,” all one word, refers to people who, of course, make films. King Kong is a movie made by filmmakers about filmmakers. I guess everybody likes to talk about themselves, including people here in Hollywood. The filmmakers in the movie “set out to investigate the myths of the legendary creature, King Kong.” “To set out” is a phrasal verb meaning to begin, to start – usually on a long journey or trip. Again, a long journey or a long trip is a very common theme in many movies. It's a way of connecting the movie and the characters. In this movie, they “set out to investigate the myths of the legendary creature, King Kong.” A “myth” (myth) is basically a made-up story, a false story that may be popular in a certain culture or popular in a certain group. You could think about the famous Greek myths and Roman myths from the ancient world. Myth is a very good source for stories, and a lot of movies are based on myths. Nowadays, a lot of movies are based on things like video games, but it used to be more common that we made movies based on things like myths. Closely related to the idea of myth, and also very popular in blockbuster movies, is the idea of a “legend” (legend). When we say something is a “legend,” we are describing some event or some person who did great things. Sometimes legends aren’t all 100 percent true. Sometimes legends are stories about people who really lived, but some of the details of the story may be exaggerated. You may find things in legends that aren’t all 100 percent true. The idea is that legends are about famous people in the past. The word “legendary,” then, would be about a person or an event that was part of a legend. The movie King Kong, then, is an example of a blockbuster movie that contains some of the elements that you might find in a very popular movie, or at least in some popular movies – things like myths, legends, adventures, explorers, and that sort of thing. Now let’s answer some of the questions that you have sent to us. Our first question on the English Café is from Joao (Joao) from Brazil. Joao wants to know why sometimes we pronounce the letter A as “ay” and sometimes we pronounce it as “ah.” Often, when a person is speaking slowly, like I do here on these episodes, we may pronounce words a little differently. If I'm speaking very slowly, then I'm likely to say “a something,” such as “a book.” When I'm speaking more quickly, it might be something more like “a book.” “I read a book today.” There, you hear what we might call the short “a” pronunciation. Sometimes people use the pronunciation of the article “a” when they're trying to indicate that there was just one of something. Someone may say to you, “I understand you read two books yesterday.” You might say, “No, I read ‘a’ book yesterday,” meaning I only read one book. Since we are just starting our Café series, we don't have a lot of questions to answer in these early episodes. I know we will have more in future ones. I'll talk about a few words that people have emailed me about in the past. I don't have specific names and locations. One of those words is “honeymoon.” What is a honeymoon and why do we call it a honeymoon?” A “honeymoon” (honeymoon) is the period of time immediately after two people get married. The idea is that after you get married, then you go away and you have a little vacation. That vacation is often called a “honeymoon.” More generally, “honeymoon” refers to the time after marriage when everything is great, everything is pleasurable. Why do we call it a “honeymoon?” “Honey” is a sweet substance that bees make. Something, of course, that is sweet is pleasurable, is nice, and the idea of “honeymoon” is it's a nice period. The word “moon” in “honeymoon” is a little more interesting. “Moon” can refer to a month – that is, roughly the time between two full moons. We have another expression in English, “many moons ago.” “Many moons ago” means many months ago, or a very long time ago. So, “moon” might represent just those number of days between two full moons – less than a month, I guess. That would be another possible explanation for “honeymoon.” The pleasurable part of marriage only lasts about a month. So, you should really enjoy your honeymoon. You will hear the term “honeymoon” in other contexts to refer to a period of good relations or positive activities that happen after two companies or two groups of people meet and start working with each other for the first time. It’s sometimes referred to as the “honeymoon period.” A common expression is “the honeymoon is over” or “the honeymoon period is over,” meaning this initial time that we got together and everything was great – well, that's coming to an end. Now we’re having problems. Just like in a marriage, the first few months may seem great, and then certain problems start to develop that you have to deal with, that you have to handle. Another word I sometimes have been asked about in email messages is the word “outsource” (outsource). The term “outsource” as a verb became popular especially in the 1980s and 1990s to refer to a company or an individual that gives parts of the work required for whatever it is you're making to another company or another person, often someone even in another country. The idea behind “outsourcing” is that there are certain things that are either cheaper or easier to get done outside of your own company. So, instead of hiring someone to work for your company full-time – all the time – you hire another person or another company to do part of the work for you. “Outsourcing,” especially now in the age of the Internet, has become much, much easier to do. “Outsourcing” doesn't necessarily refer to going to another country, however. It could also be referred to as simply getting another person or another company to do part of the work that your company would normally do or might do in order to produce your product or service. Finally, I want to talk about another famous expression in English that has its origins in a way here in Los Angeles, in Hollywood. That expression is “cut to the chase.” “Cut to the chase” (chase) means usually get to the point, get on with it, get to what you really want to tell me. When somebody is giving you an explanation of something, for example, and they seem to be giving you a lot of details that aren’t really necessary for you to understand the situation, and perhaps you don't have a lot of time to sit and listen to them, you might say to them, “Cut to the chase.” Now, I have to say that this is something you would only say either to someone who works for you – one of your employees – or someone who is of a lower status or position than you. You might also be able to say this among friends when you want your friend to hurry up and give you the main part of the information they're trying to convey or to give to you. Where does this expression “cut to the chase” come from? The most likely explanation is that in action movies, usually towards the end of the movie, there is a chase scene where typically one car is chasing another. “To chase” (chase) is a verb means to go after, to try to catch – especially someone who is trying to escape, to get away from you. So, action movies are most exciting toward the end when you have the chase scenes. “Cut to the chase” would mean get to the exciting part of the movie, and that's really, I think, the origin of this very interesting expression, “to cut to the chase.” If you have a question or comment, you can email us. Our email address is eslpod@eslpod.com. From Los Angeles, California, I'm Jeff McQuillan. Thanks for listening. Come back and listen to us again right here on the English Café. ESL Podcast’s English Café was written and produced by Dr. Jeff McQuillan and Dr. Lucy Tse. Copyright 2006 by the Center for Educational Development. Glossary headline – the title of a news story, usually printed in large letters * Desiree did not have enough time to read the entire newspaper, so she glanced at the headlines to see if there was anything she wanted to read later. aircraft – airplane or helicopter; a vehicle or machine that transports people by flying * The weather has been very stormy lately, making it difficult for any aircraft to operate. manufacturer – a person or company that makes a product; someone or some company that creates and produces an item that is sold to or used by others * Since Carlisle’s old car had always given him a lot of problems, he decided to buy a new car made by a different manufacturer. baby boomer – someone born between 1946 and 1964, during a period after World War II ended in which an unusually large number of children were born * Janine was born February 8, 1947, making her one of the oldest baby boomers. generation – a group of people born around the same time period; a group of people who were born during a certain time period and share many of the same experiences and ideas as a result * Florencio tries to keep up with his grandchildren, but he just can’t understand the way that people from younger generations think. Census Bureau – a department of the United States government that regularly counts how many people live in the United States; a government organization that determines the how many people are living in areas within the United States and uses the information to form conclusions about population patterns * The Census Bureau released information about how many people had moved in and out of Oregon over the past 10 years. Generation X – the group of people born between the mid-1960s to the early 1980s * Claude was a member of Generation X and had grown up listening to everything from 1970s disco music to 1980s metal bands. blockbuster – a movie that is very popular, based on the number of tickets sold; a movie that many people saw or are expected to see * Titanic was a major blockbuster, earning over $28 million during its opening weekend in 1997. crew – a group of people who work together to accomplish a shared task or goal, especially when that task requires physical work * The news crew raced to set up the equipment so that they could report on the story live. explorer – an adventurer; someone who visits an unknown or unfamiliar location and investigates or observes that location * The explorers traveled to a South American rainforest to search for a particular plant they wanted to study. filmmaker – someone who creates movies; someone who leads the creation of a movie by either directing or producing it * Tonisha is a filmmaker who specializes in producing documentary films. to set out – to begin or start a planned project or activity; to start something that is expected to become a long, detailed process * Roberto and Ella never set out to hurt anyone, but the secret documents they gave to reporters resulted in the closing of the company. myth – a fictional or untrue story; a story that is used to explain events or things about the way the world works but is not usually based in truth or fact * The story of Persephone is a Greek myth explaining why the weather goes through four seasons. legendary – a person or event from a famous or well-known story; something or someone that people tell stories about for many years * The prank Quentin played during his senior year of high school was so legendary that people are talking about it years after he’s graduated. What Insiders Know My Great-Great-Great-Great Grandfather It’s easy to know what to call your “immediate family” (family closely related to you, such as father, mother, and sister/brother) and even “extended family (family not as closely related, such as uncles/aunts, cousins, and grandparents). But what do you call your “ancestors” (family members who lived many years before you were born)? The father of your father is your grandfather. Logically, you would think that your grandfather’s father would be your “grand-grandfather,” but that is not what Americans would say. Instead, after your grandfather, you add the word “great,” so my grandfather’s father is your great-grandfather. What do we call your great-grandfather’s father? He is your great-great-grandfather. You continue to add “great” for every additional generation you want, so you could talk about your great-great-great-great-great-great-grandfather (or grandmother, of course). A similar system is used in talking about your children and your children’s children. Your child’s child is called your grandchild, and his child would be your great-grandchild, and so forth. If you have a niece (your brother’s or sister’s daughter) or nephew (your brother’s or sister’s son), what do I call them? Here things get a little confusing, because it is possible to call them your grandnieces and grandnephews, or your great-nieces and great-nephews. They would call your their great-uncle or granduncle. Great-uncle and great-aunt are much more popular, however, at least in the U.S. After this, you keep adding “greats” as you do with grandparents. In summary, if you are talking about your parent’s parents, you start with “grand” and then add “great(s).” If you are talking about uncles, aunts, nieces, and nephews, then you can either start with “great” or use “grand” as you do with grandmother/grandfather.]]></content>
  </entry>
</search>
